@model Cats.Areas.GiftCertificate.Models.GiftCertificateViewModel
@using Cats.Areas.GiftCertificate.Models
@using Cats.Helpers
@using Cats.Models
@using Kendo.Mvc.UI
@using LanguageHelpers.Localization
@{
    ViewBag.Title = Translator.Translate("Gift Certificate");
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}
@section Toolbar
{
    <a class="btn toolbar-btn " data-buttontype="btn_save" data-submittedform="frm_edit_gift"></a>
    <a class="btn toolbar-btn " data-buttontype="btn_cancel" href="@Url.Action("Index", "GiftCertificate")"></a>
}
<h2>@Translator.Translate(" Gift Certificate")</h2>

@*<p>
    @Translator.Translate("Use this form to create new or edit gift certificates.")  @Translator.Translate(" marks required fields.")
</p>*@

@{ViewBag.IsInEditMode = true; }
@using (Html.BeginForm("Edit","GiftCertificate",FormMethod.Post,new{id="frm_edit_gift"}))
{
    @Html.ValidationSummary(true)
           
    @Html.HiddenFor(model => model.GiftCertificateID)
    @Html.HiddenFor(model => model.rowCount)
 
    <div class="form-horizontal">
        <table  style="vertical-align: top">
            <tr>
                <td style="vertical-align: top">
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.GiftDate, Translator.Translate("Gift Date"))*
                        </div>
                        <div class="controls">
                           @Html.DisplayFor(model => model.GiftDate, new { @class = "input-xlarge cats-datepicker2", @placeholder = "0" })  
                          
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.DModeOfTransport, Translator.Translate("Mode Of transport")) 
                        </div>
                        <div class="controls">

                            @Html.DisplayFor(model=>model.DModeOfTransportName)

                           
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.ProgramID, Translator.Translate("Program")) 
                        </div>
                        <div class="controls">

                            @Html.DropDownList("ProgramID", string.Empty)
                            @Html.ValidationMessageFor(model => model.ProgramID)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.DonorID, Translator.Translate("Donor")) 
                        </div>
                        <div class="controls">

                            @Html.DropDownList("DonorID", string.Empty)
                            @Html.ValidationMessageFor(model => model.DonorID)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.CommodityTypeID, Translator.Translate("Commodity Type")) 
                        </div>
                        <div class="controls">

                            @Html.DropDownList("CommodityTypeID", string.Empty)

                            @Html.ValidationMessageFor(model => model.CommodityTypeID)

                        </div>
                    </div>
                </td>
                <td style="vertical-align: top">
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.SINumber, Translator.Translate("SI/Batch Number")) 
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.SINumber)
                            @Html.ValidationMessageFor(model => model.SINumber)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.PortName, Translator.Translate("Port Name"))
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.PortName)
                            @Html.ValidationMessageFor(model => model.PortName)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.ReferenceNo, Translator.Translate("Reference Number")) 
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.ReferenceNo)
                            @Html.ValidationMessageFor(model => model.ReferenceNo)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.Vessel, Translator.Translate("Vessel")) 
                        </div>
                        <div class="controls">
                            @Html.EditorFor(model => model.Vessel)
                            @Html.ValidationMessageFor(model => model.Vessel)
                        </div>
                    </div>
                    <div class="control-group">
                        <div class="control-label">
                            @Html.LabelFor(model => model.ETA, Translator.Translate("ETA")) 
                        </div>

                        <div class="controls">
                         @Html.TextBoxFor(model => model.ETA, new { @class = "input-xlarge cats-datepicker2", @placeholder = "0" })  
                            @Html.ValidationMessageFor(model => model.ETA)
                        </div>
                    </div>
                </td>
            </tr>
        </table>
    </div>
   

   }     
    <div class="clear"></div>
    <div class="field-set">
        <table>
            <tr>
                <td>

                    @(Html.Kendo().Grid<GiftCertificateDetailsViewModel>()
           .Name("Grid")
           .ToolBar(commands =>
                        {
                            commands.Create();
                            commands.Save();
                        })

           .Editable(editing => editing.Mode(GridEditMode.InCell))
           .Columns(columns =>
                        {
                            columns.AutoGenerate(false);
                            columns.ForeignKey(o => o.CommodityID, (IEnumerable<Commodity>)ViewData["Commodities"], "CommodityID", "Name").Width(10).Title(Translator.Translate("Commodity"))
                                .Filterable(true);
                            columns.Bound(o => o.BillOfLoading).Width(80).Title(Translator.Translate("Bill of Loading"));

                            columns.Bound(o => o.YearPurchased).Width(100).Title(Translator.Translate("Year Purchased")).Width(80).HtmlAttributes(new { align = "right" });
                            columns.Bound(o => o.AccountNumber).Width(10).Title(Translator.Translate("Acc. No")).Width(80).HtmlAttributes(new { align = "right" });
                            columns.Bound(o => o.WeightInMT).Title(Translator.Translate("Sent Qty (MT)")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N3}");
                            columns.Bound(o => o.EstimatedPrice).Title(Translator.Translate("Est. Price")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N2}");
                            columns.Bound(o => o.EstimatedTax).Title(Translator.Translate("Est. Tax")).Width(10).HtmlAttributes(new { align = "right" }).Format("{0:N2}");

                            columns.ForeignKey(o => o.DCurrencyID, (System.Collections.IEnumerable)ViewData["DCurrencies"], "DetailID", "Name").Width(10).Title(Translator.Translate("Currency"))
                                .Filterable(true);
                            columns.ForeignKey(o => o.DFundSourceID, (System.Collections.IEnumerable)ViewData["DFundSources"], "DetailID", "Name").Width(10).Title(Translator.Translate("Fund Source"))
                                .Filterable(true);
                            columns.ForeignKey(o => o.DBudgetTypeID, (System.Collections.IEnumerable)ViewData["DBudgetTypes"], "DetailID", "Name").Width(10).Title(Translator.Translate("Fund Type"))
                                .Filterable(true);
                            columns.Bound(o => o.ExpiryDate).Title(Translator.Translate("Expiry Date")).Format("{0:dd-MMM-yyyy}").Width(10);
                            columns.Command(commands => commands.Destroy().HtmlAttributes(new { align = "center" })).Width(10).Title(Translator.Translate("Commands"));

                        })
           .DataSource(binding => binding.Ajax()
                                       .Read(read => read.Action("GiftCertificateDetail_Read", "GiftCertificate", new { id = Model.GiftCertificateID }))
                                       .Create(create => create.Action("GiftCertificateDetail_Create", "GiftCertificate", new { id = Model.GiftCertificateID }))
                                       .Update(update => update.Action("GiftCertificateDetail_Update", "GiftCertificate"))
                                       .Destroy(destroy => destroy.Action("GiftCertificateDetail_Destroy", "GiftCertificate"))
                                       .Model(m => m.Id(t => t.GiftCertificateDetailID))

           )


           .Navigatable()
           

                                            )
                    @Html.ValidationMessageFor(model => model.rowCount)
                </td>
            </tr>
        </table>
    </div>
