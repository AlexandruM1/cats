//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.15
//     CLR Version: v4.0.30319
//     <NetSqlAzMan-info>
//        Store: CATS
//        Application: Early_Warning
//        Last update: 10/7/2013 3:45:14 PM
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
// 
// TODO: Add NetSqlAzMan.dll Assembly reference.
// 
// 
namespace Early_Warning.Security
{
    using System;
    using System.Security.Principal;
    using System.Collections.Generic;
    using System.Text;
    using NetSqlAzMan;
    using NetSqlAzMan.Interfaces;

    /// <summary>
    /// NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'Early Warning' Application 
    /// </summary>
    public partial class CheckAccessHelper : ICheckAccessHelper
    {
        #region Constants
        /// <summary>
        /// Store Name
        /// </summary>
        protected internal const string STORE_NAME = "CATS";
        /// <summary>
        /// Application Name
        /// </summary>
        protected internal const string APPLICATION_NAME = "Early Warning";
        #endregion

        #region Fields
        /// <summary>
        /// NetSqlAzMan Storage reference.
        /// </summary>
        protected NetSqlAzMan.Interfaces.IAzManStorage mStorage;
        /// <summary>
        /// User Windows Principal Identity.
        /// </summary>
        protected System.Security.Principal.WindowsIdentity windowsIdentity;

        #endregion

        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CheckAccessHelper"/> class [Windows Users ONLY].
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        /// <param name="windowsIdentity">The Windows Principal Identity.</param>
        public CheckAccessHelper(string storageConnectionString, System.Security.Principal.WindowsIdentity windowsIdentity)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
            this.windowsIdentity = windowsIdentity;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CheckAccessHelper"/> class [DB Users ONLY].
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        public CheckAccessHelper(string storageConnectionString)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the NetSqlAzMan Storage.
        /// </summary>
        public virtual NetSqlAzMan.Interfaces.IAzManStorage Storage
        {
            get
            {
                return this.mStorage;
            }
        }
        #endregion

        #region Methods
        /// <summary>
        /// Opens the connection
        /// </summary>
        public virtual void OpenConnection()
        {
            this.mStorage.OpenConnection();
        }
        /// <summary>
        /// Closes the connection
        /// </summary>
        public virtual void CloseConnection()
        {
            this.mStorage.CloseConnection();
        }
        /// <summary>
        /// Retrieve Item name from a Operation Enum.
        /// </summary>
        /// <param name="operation">The operation.</param>
        /// <returns>The Operation Name.</returns>
        public virtual string ItemName(Operation operation)
        {
            if ((operation == Operation.Add_new_commodity_allocation))
            {
                return "Add new commodity allocation";
            }
            if ((operation == Operation.Add_new_ration))
            {
                return "Add new ration";
            }
            if ((operation == Operation.Add_new_request))
            {
                return "Add new request";
            }
            if ((operation == Operation.Create_new_needs_assessment))
            {
                return "Create new needs assessment";
            }
            if ((operation == Operation.Delete_needs_assessment))
            {
                return "Delete needs assessment";
            }
            if ((operation == Operation.Edit_Gift_Certificate))
            {
                return "Edit Gift Certificate";
            }
            if ((operation == Operation.Edit_needs_assessment))
            {
                return "Edit needs assessment";
            }
            if ((operation == Operation.Edit_ration))
            {
                return "Edit ration";
            }
            if ((operation == Operation.Edit_request))
            {
                return "Edit request";
            }
            if ((operation == Operation.Edit_requisition))
            {
                return "Edit requisition";
            }
            if ((operation == Operation.Export_Gift_Certificate))
            {
                return "Export Gift Certificate";
            }
            if ((operation == Operation.Export_needs_assessment))
            {
                return "Export needs assessment";
            }
            if ((operation == Operation.Export_ration))
            {
                return "Export ration";
            }
            if ((operation == Operation.Export_requests))
            {
                return "Export requests";
            }
            if ((operation == Operation.Export_requisitions))
            {
                return "Export requisitions";
            }
            if ((operation == Operation.Followup_requisitions))
            {
                return "Followup requisitions";
            }
            if ((operation == Operation.Gift_Add_new_item))
            {
                return "Gift-Add new item";
            }
            if ((operation == Operation.Modify_HRD))
            {
                return "Modify HRD";
            }
            if ((operation == Operation.New_Gift_Certificate))
            {
                return "New Gift Certificate";
            }
            if ((operation == Operation.New_HRD))
            {
                return "New HRD";
            }
            if ((operation == Operation.Print_Gift_Certificate))
            {
                return "Print Gift Certificate";
            }
            if ((operation == Operation.Print_HRD))
            {
                return "Print HRD";
            }
            if ((operation == Operation.Print_needs_assessment))
            {
                return "Print needs assessment";
            }
            if ((operation == Operation.Print_ration))
            {
                return "Print ration";
            }
            if ((operation == Operation.Print_request))
            {
                return "Print request";
            }
            if ((operation == Operation.Print_requisitions))
            {
                return "Print requisitions";
            }
            if ((operation == Operation.Ration__Add_new_item))
            {
                return "Ration- Add new item";
            }
            if ((operation == Operation.Requisition_exceptions))
            {
                return "Requisition exceptions";
            }
            if ((operation == Operation.View_approved_needs_assesment))
            {
                return "View approved needs assesment";
            }
            if ((operation == Operation.View_approved_requisitions))
            {
                return "View approved requisitions";
            }
            if ((operation == Operation.View_Beneficiary_no_and_duration_of_assisstance))
            {
                return "View Beneficiary no and duration of assisstance";
            }
            if ((operation == Operation.View_Draft_requests))
            {
                return "View Draft requests";
            }
            if ((operation == Operation.View_draft_requisition))
            {
                return "View draft requisition";
            }
            if ((operation == Operation.View_Gift_Certificate_list))
            {
                return "View Gift Certificate list";
            }
            if ((operation == Operation.View_HRD_list))
            {
                return "View HRD list";
            }
            if ((operation == Operation.View_request))
            {
                return "View request";
            }
            if ((operation == Operation.View_submitted_requests))
            {
                return "View submitted requests";
            }
            throw new System.ArgumentException("Unknown Operation name", "operation");
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(CheckAccessHelper.STORE_NAME, CheckAccessHelper.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), customSID, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), customSID, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, contextParameters);
            return true;
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, contextParameters);
            return true;
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, out attributes, contextParameters);
            return true;
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, out attributes, contextParameters);
            return true;
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, out attributes, contextParameters);
            return true;
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        #endregion

        #region Enums
        /// <summary>
        /// Operations Enumeration
        /// </summary>
        public enum Operation
        {
            /// <summary>
            /// Operation Add new commodity allocation
            /// </summary>
            Add_new_commodity_allocation,
            /// <summary>
            /// Operation Add new ration
            /// </summary>
            Add_new_ration,
            /// <summary>
            /// Operation Add new request
            /// </summary>
            Add_new_request,
            /// <summary>
            /// Operation Create new needs assessment
            /// </summary>
            Create_new_needs_assessment,
            /// <summary>
            /// Operation Delete needs assessment
            /// </summary>
            Delete_needs_assessment,
            /// <summary>
            /// Operation Edit Gift Certificate
            /// </summary>
            Edit_Gift_Certificate,
            /// <summary>
            /// Operation Edit needs assessment
            /// </summary>
            Edit_needs_assessment,
            /// <summary>
            /// Operation Edit ration
            /// </summary>
            Edit_ration,
            /// <summary>
            /// Operation Edit request
            /// </summary>
            Edit_request,
            /// <summary>
            /// Operation Edit requisition
            /// </summary>
            Edit_requisition,
            /// <summary>
            /// Operation Export Gift Certificate
            /// </summary>
            Export_Gift_Certificate,
            /// <summary>
            /// Operation Export needs assessment
            /// </summary>
            Export_needs_assessment,
            /// <summary>
            /// Operation Export ration
            /// </summary>
            Export_ration,
            /// <summary>
            /// Operation Export requests
            /// </summary>
            Export_requests,
            /// <summary>
            /// Operation Export requisitions
            /// </summary>
            Export_requisitions,
            /// <summary>
            /// Operation Followup requisitions
            /// </summary>
            Followup_requisitions,
            /// <summary>
            /// Operation Gift-Add new item
            /// </summary>
            Gift_Add_new_item,
            /// <summary>
            /// Operation Modify HRD
            /// </summary>
            Modify_HRD,
            /// <summary>
            /// Operation New Gift Certificate
            /// </summary>
            New_Gift_Certificate,
            /// <summary>
            /// Operation New HRD
            /// </summary>
            New_HRD,
            /// <summary>
            /// Operation Print Gift Certificate
            /// </summary>
            Print_Gift_Certificate,
            /// <summary>
            /// Operation Print HRD
            /// </summary>
            Print_HRD,
            /// <summary>
            /// Operation Print needs assessment
            /// </summary>
            Print_needs_assessment,
            /// <summary>
            /// Operation Print ration
            /// </summary>
            Print_ration,
            /// <summary>
            /// Operation Print request
            /// </summary>
            Print_request,
            /// <summary>
            /// Operation Print requisitions
            /// </summary>
            Print_requisitions,
            /// <summary>
            /// Operation Ration- Add new item
            /// </summary>
            Ration__Add_new_item,
            /// <summary>
            /// Operation Requisition exceptions
            /// </summary>
            Requisition_exceptions,
            /// <summary>
            /// Operation View approved needs assesment
            /// </summary>
            View_approved_needs_assesment,
            /// <summary>
            /// Operation View approved requisitions
            /// </summary>
            View_approved_requisitions,
            /// <summary>
            /// Operation View Beneficiary no and duration of assisstance
            /// </summary>
            View_Beneficiary_no_and_duration_of_assisstance,
            /// <summary>
            /// Operation View Draft requests
            /// </summary>
            View_Draft_requests,
            /// <summary>
            /// Operation View draft requisition
            /// </summary>
            View_draft_requisition,
            /// <summary>
            /// Operation View Gift Certificate list
            /// </summary>
            View_Gift_Certificate_list,
            /// <summary>
            /// Operation View HRD list
            /// </summary>
            View_HRD_list,
            /// <summary>
            /// Operation View request
            /// </summary>
            View_request,
            /// <summary>
            /// Operation View submitted requests
            /// </summary>
            View_submitted_requests,
        }

        #endregion
    }

    public interface ICheckAccessHelper
    {
         IAzManStorage Storage{ get; }

        // protected NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters);

        bool CheckAccess(CheckAccessHelper.Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID,
                         out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>
                             attributes, params KeyValuePair<string, object>[] contextParameters);

        bool CheckAccess(CheckAccessHelper.Operation operation, string dbUserName,
                         out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>
                             attributes, params KeyValuePair<string, object>[] contextParameters);

        bool CheckAccess(CheckAccessHelper.Operation operation,
                         out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>
                             attributes, params KeyValuePair<string, object>[] contextParameters);

        bool CheckAccess(CheckAccessHelper.Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID,
                         params KeyValuePair<string, object>[] contextParameters);

        bool CheckAccess(CheckAccessHelper.Operation operation, string dbUserName,
                         params KeyValuePair<string, object>[] contextParameters);


        bool CheckAccess(CheckAccessHelper.Operation operation, params KeyValuePair<string, object>[] contextParameters);

    }

}
