//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.15
//     CLR Version: v4.0.30319
//     <NetSqlAzMan-info>
//        Store: CATS
//        Application: Procurement
//        Last update: 1/9/2014 4:25:18 PM
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
// 
// TODO: Add NetSqlAzMan.dll Assembly reference.
// 
// 
namespace Cats.Services.Security
{
    using System;
    using System.Security.Principal;
    using System.Collections.Generic;
    using System.Text;
    using NetSqlAzMan;
    using NetSqlAzMan.Interfaces;

    /// <summary>
    /// NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'Procurement' Application 
    /// </summary>
    public partial class ProcurementCheckAccess:IProcurementCheckAccess
    {
        #region Constants
        /// <summary>
        /// Store Name
        /// </summary>
        protected internal const string STORE_NAME = "CATS";
        /// <summary>
        /// Application Name
        /// </summary>
        protected internal const string APPLICATION_NAME = "Procurement";
        #endregion
        #region Fields
        /// <summary>
        /// NetSqlAzMan Storage reference.
        /// </summary>
        protected NetSqlAzMan.Interfaces.IAzManStorage mStorage;
        /// <summary>
        /// User Windows Principal Identity.
        /// </summary>
        protected System.Security.Principal.WindowsIdentity windowsIdentity;
        #endregion
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ProcurementCheckAccess"/> class [Windows Users ONLY].
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        /// <param name="windowsIdentity">The Windows Principal Identity.</param>
        public ProcurementCheckAccess(string storageConnectionString, System.Security.Principal.WindowsIdentity windowsIdentity)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
            this.windowsIdentity = windowsIdentity;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ProcurementCheckAccess"/> class [DB Users ONLY].
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        public ProcurementCheckAccess(string storageConnectionString)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
        }
        #endregion
        #region Properties
        /// <summary>
        /// Gets the NetSqlAzMan Storage.
        /// </summary>
        public virtual NetSqlAzMan.Interfaces.IAzManStorage Storage
        {
            get
            {
                return this.mStorage;
            }
        }
        #endregion
        #region Methods
        /// <summary>
        /// Opens the connection
        /// </summary>
        public virtual void OpenConnection()
        {
            this.mStorage.OpenConnection();
        }
        /// <summary>
        /// Closes the connection
        /// </summary>
        public virtual void CloseConnection()
        {
            this.mStorage.CloseConnection();
        }
        /// <summary>
        /// Retrieve Item name from a Role Enum.
        /// </summary>
        /// <param name="role">The role.</param>
        /// <returns>The Role Name.</returns>
        public virtual string ItemName(Role role)
        {
            if ((role == Role.Procurement_Unit_Coordinator))
            {
                return "Procurement Unit Coordinator";
            }
            if ((role == Role.Procurement_Data_Encoder))
            {
                return "Procurement-Data Encoder";
            }
            if ((role == Role.Procurement_Purchaser))
            {
                return "Procurement-Purchaser";
            }
            throw new System.ArgumentException("Unknown Role name", "role");
        }
        /// <summary>
        /// Retrieve Item name from a Task Enum.
        /// </summary>
        /// <param name="task">The task.</param>
        /// <returns>The Task Name.</returns>
        public virtual string ItemName(Task task)
        {
            if ((task == Task.Approve_Bid_Proposals))
            {
                return "Approve Bid Proposals";
            }
            if ((task == Task.Bid_admin))
            {
                return "Bid admin";
            }
            if ((task == Task.Bid_plan))
            {
                return "Bid plan";
            }
            if ((task == Task.Contract_Admin))
            {
                return "Contract Admin";
            }
            if ((task == Task.Generate_Winners))
            {
                return "Generate Winners";
            }
            if ((task == Task.Manage_bid))
            {
                return "Manage bid";
            }
            if ((task == Task.Payment_Request))
            {
                return "Payment Request";
            }
            if ((task == Task.Price_Quotation_Data_Entries))
            {
                return "Price Quotation Data Entries";
            }
            if ((task == Task.Request_For_Quotation__RFQ))
            {
                return "Request For Quotation (RFQ)";
            }
            if ((task == Task.Transport_Order))
            {
                return "Transport Order";
            }
            if ((task == Task.Transport_Supplier))
            {
                return "Transport Supplier";
            }
            if ((task == Task.Winners_Dispatch_Location))
            {
                return "Winners Dispatch Location";
            }
            if ((task == Task.Woreda_Bid_Proposal))
            {
                return "Woreda Bid Proposal";
            }
            if ((task == Task.Woreda_bid_Status))
            {
                return "Woreda bid Status";
            }
            throw new System.ArgumentException("Unknown Task name", "task");
        }
        /// <summary>
        /// Retrieve Item name from a Operation Enum.
        /// </summary>
        /// <param name="operation">The operation.</param>
        /// <returns>The Operation Name.</returns>
        public virtual string ItemName(Operation operation)
        {
            if ((operation == Operation.Add_TO))
            {
                return "Add TO";
            }
            if ((operation == Operation.Approve_TO))
            {
                return "Approve TO";
            }
            if ((operation == Operation.Assign_Transporter))
            {
                return "Assign Transporter";
            }
            if ((operation == Operation.Bid_Planning))
            {
                return "Bid Planning";
            }
            if ((operation == Operation.Cash_Check))
            {
                return "Cash Check";
            }
            if ((operation == Operation.Create_new_bid))
            {
                return "Create new bid";
            }
            if ((operation == Operation.Create_new_bid_plan))
            {
                return "Create new bid plan";
            }
            if ((operation == Operation.Create_New_Bid_Proposal))
            {
                return "Create New Bid Proposal";
            }
            if ((operation == Operation.Delete_bid_plan))
            {
                return "Delete bid plan";
            }
            if ((operation == Operation.Delete_Bid_Proposal))
            {
                return "Delete Bid Proposal";
            }
            if ((operation == Operation.Delete_Transport_Supplier))
            {
                return "Delete Transport Supplier";
            }
            if ((operation == Operation.Edit_bid))
            {
                return "Edit bid";
            }
            if ((operation == Operation.Edit_bid_plan))
            {
                return "Edit bid plan";
            }
            if ((operation == Operation.Edit_Bid_Proposal))
            {
                return "Edit Bid Proposal";
            }
            if ((operation == Operation.Edit_bid_proposal_details))
            {
                return "Edit bid proposal details";
            }
            if ((operation == Operation.Edit_TO))
            {
                return "Edit TO";
            }
            if ((operation == Operation.Edit_Transport_Supplier))
            {
                return "Edit Transport Supplier";
            }
            if ((operation == Operation.Export_bid))
            {
                return "Export bid";
            }
            if ((operation == Operation.Export_bid_plan))
            {
                return "Export bid plan";
            }
            if ((operation == Operation.Export_Payment_Request))
            {
                return "Export Payment Request";
            }
            if ((operation == Operation.Generate_Agreement))
            {
                return "Generate Agreement";
            }
            if ((operation == Operation.Generate_Winners_for_a_bid))
            {
                return "Generate Winners for a bid";
            }
            if ((operation == Operation.Issue_Check))
            {
                return "Issue Check";
            }
            if ((operation == Operation.Manage_Bids))
            {
                return "Manage Bids";
            }
            if ((operation == Operation.New_Payment_Request))
            {
                return "New Payment Request";
            }
            if ((operation == Operation.New_Transport_Supplier))
            {
                return "New Transport Supplier";
            }
            if ((operation == Operation.Price_Quotation_Data_Entry))
            {
                return "Price Quotation Data Entry";
            }
            if ((operation == Operation.Print_bid))
            {
                return "Print bid";
            }
            if ((operation == Operation.Print_bid_plan))
            {
                return "Print bid plan";
            }
            if ((operation == Operation.Print_Contract))
            {
                return "Print Contract";
            }
            if ((operation == Operation.Print_Payment_request))
            {
                return "Print Payment request";
            }
            if ((operation == Operation.Print_RFQ))
            {
                return "Print RFQ";
            }
            if ((operation == Operation.Reject_Approval))
            {
                return "Reject Approval";
            }
            if ((operation == Operation.Request_Approval))
            {
                return "Request Approval";
            }
            if ((operation == Operation.Transport_Suppliers))
            {
                return "Transport Suppliers";
            }
            if ((operation == Operation.Transport_warehouse_assignment))
            {
                return "Transport warehouse assignment";
            }
            if ((operation == Operation.View_Active_Agreement))
            {
                return "View Active Agreement";
            }
            if ((operation == Operation.View_approved_bid))
            {
                return "View approved bid";
            }
            if ((operation == Operation.View_Bid_admin))
            {
                return "View Bid admin";
            }
            if ((operation == Operation.View_bid_list))
            {
                return "View bid list";
            }
            if ((operation == Operation.View_bid_plan))
            {
                return "View bid plan";
            }
            if ((operation == Operation.View_Bid_Proposals))
            {
                return "View Bid Proposals";
            }
            if ((operation == Operation.View_current_bid))
            {
                return "View current bid";
            }
            if ((operation == Operation.View_Dispath_Locations))
            {
                return "View Dispath Locations";
            }
            if ((operation == Operation.View_History))
            {
                return "View History";
            }
            if ((operation == Operation.View_Payment_History))
            {
                return "View Payment History";
            }
            if ((operation == Operation.View_Payment_Request))
            {
                return "View Payment Request";
            }
            if ((operation == Operation.View_Price_Quotation_Data_Entries))
            {
                return "View Price Quotation Data Entries";
            }
            if ((operation == Operation.View_Request_For_Quotation))
            {
                return "View Request For Quotation";
            }
            if ((operation == Operation.View_Transport_Order))
            {
                return "View Transport Order";
            }
            if ((operation == Operation.View_Transport_Suppliers))
            {
                return "View Transport Suppliers";
            }
            if ((operation == Operation.View_Winners_for_Contract))
            {
                return "View Winners for Contract";
            }
            if ((operation == Operation.Winners_Dispatch_Locations))
            {
                return "Winners Dispatch Locations";
            }
            throw new System.ArgumentException("Unknown Operation name", "operation");
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), dbUserName, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), customSID, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), dbUserName, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), customSID, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), dbUserName, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), customSID, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), dbUserName, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), customSID, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), customSID, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), customSID, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        #endregion
        #region Enums
        /// <summary>
        /// Roles Enumeration
        /// </summary>
        public enum Role
        {
            /// <summary>
            /// Role Procurement Unit Coordinator
            /// </summary>
            Procurement_Unit_Coordinator,
            /// <summary>
            /// Role Procurement-Data Encoder
            /// </summary>
            Procurement_Data_Encoder,
            /// <summary>
            /// Role Procurement-Purchaser
            /// </summary>
            Procurement_Purchaser,
        }
        /// <summary>
        /// Tasks Enumeration
        /// </summary>
        public enum Task
        {
            /// <summary>
            /// Task Approve Bid Proposals
            /// </summary>
            Approve_Bid_Proposals,
            /// <summary>
            /// Task Bid admin
            /// </summary>
            Bid_admin,
            /// <summary>
            /// Task Bid plan
            /// </summary>
            Bid_plan,
            /// <summary>
            /// Task Contract Admin
            /// </summary>
            Contract_Admin,
            /// <summary>
            /// Task Generate Winners
            /// </summary>
            Generate_Winners,
            /// <summary>
            /// Task Manage bid
            /// </summary>
            Manage_bid,
            /// <summary>
            /// Task Payment Request
            /// </summary>
            Payment_Request,
            /// <summary>
            /// Task Price Quotation Data Entries
            /// </summary>
            Price_Quotation_Data_Entries,
            /// <summary>
            /// Task Request For Quotation (RFQ)
            /// </summary>
            Request_For_Quotation__RFQ,
            /// <summary>
            /// Task Transport Order
            /// </summary>
            Transport_Order,
            /// <summary>
            /// Task Transport Supplier
            /// </summary>
            Transport_Supplier,
            /// <summary>
            /// Task Winners Dispatch Location
            /// </summary>
            Winners_Dispatch_Location,
            /// <summary>
            /// Task Woreda Bid Proposal
            /// </summary>
            Woreda_Bid_Proposal,
            /// <summary>
            /// Task Woreda bid Status
            /// </summary>
            Woreda_bid_Status,
        }
        /// <summary>
        /// Operations Enumeration
        /// </summary>
        public enum Operation
        {
            /// <summary>
            /// Operation Add TO
            /// </summary>
            Add_TO,
            /// <summary>
            /// Operation Approve TO
            /// </summary>
            Approve_TO,
            /// <summary>
            /// Operation Assign Transporter
            /// </summary>
            Assign_Transporter,
            /// <summary>
            /// Operation Bid Planning
            /// </summary>
            Bid_Planning,
            /// <summary>
            /// Operation Cash Check
            /// </summary>
            Cash_Check,
            /// <summary>
            /// Operation Create new bid
            /// </summary>
            Create_new_bid,
            /// <summary>
            /// Operation Create new bid plan
            /// </summary>
            Create_new_bid_plan,
            /// <summary>
            /// Operation Create New Bid Proposal
            /// </summary>
            Create_New_Bid_Proposal,
            /// <summary>
            /// Operation Delete bid plan
            /// </summary>
            Delete_bid_plan,
            /// <summary>
            /// Operation Delete Bid Proposal
            /// </summary>
            Delete_Bid_Proposal,
            /// <summary>
            /// Operation Delete Transport Supplier
            /// </summary>
            Delete_Transport_Supplier,
            /// <summary>
            /// Operation Edit bid
            /// </summary>
            Edit_bid,
            /// <summary>
            /// Operation Edit bid plan
            /// </summary>
            Edit_bid_plan,
            /// <summary>
            /// Operation Edit Bid Proposal
            /// </summary>
            Edit_Bid_Proposal,
            /// <summary>
            /// Operation Edit bid proposal details
            /// </summary>
            Edit_bid_proposal_details,
            /// <summary>
            /// Operation Edit TO
            /// </summary>
            Edit_TO,
            /// <summary>
            /// Operation Edit Transport Supplier
            /// </summary>
            Edit_Transport_Supplier,
            /// <summary>
            /// Operation Export bid
            /// </summary>
            Export_bid,
            /// <summary>
            /// Operation Export bid plan
            /// </summary>
            Export_bid_plan,
            /// <summary>
            /// Operation Export Payment Request
            /// </summary>
            Export_Payment_Request,
            /// <summary>
            /// Operation Generate Agreement
            /// </summary>
            Generate_Agreement,
            /// <summary>
            /// Operation Generate Winners for a bid
            /// </summary>
            Generate_Winners_for_a_bid,
            /// <summary>
            /// Operation Issue Check
            /// </summary>
            Issue_Check,
            /// <summary>
            /// Operation Manage Bids
            /// </summary>
            Manage_Bids,
            /// <summary>
            /// Operation New Payment Request
            /// </summary>
            New_Payment_Request,
            /// <summary>
            /// Operation New Transport Supplier
            /// </summary>
            New_Transport_Supplier,
            /// <summary>
            /// Operation Price Quotation Data Entry
            /// </summary>
            Price_Quotation_Data_Entry,
            /// <summary>
            /// Operation Print bid
            /// </summary>
            Print_bid,
            /// <summary>
            /// Operation Print bid plan
            /// </summary>
            Print_bid_plan,
            /// <summary>
            /// Operation Print Contract
            /// </summary>
            Print_Contract,
            /// <summary>
            /// Operation Print Payment request
            /// </summary>
            Print_Payment_request,
            /// <summary>
            /// Operation Print RFQ
            /// </summary>
            Print_RFQ,
            /// <summary>
            /// Operation Reject Approval
            /// </summary>
            Reject_Approval,
            /// <summary>
            /// Operation Request Approval
            /// </summary>
            Request_Approval,
            /// <summary>
            /// Operation Transport Suppliers
            /// </summary>
            Transport_Suppliers,
            /// <summary>
            /// Operation Transport warehouse assignment
            /// </summary>
            Transport_warehouse_assignment,
            /// <summary>
            /// Operation View Active Agreement
            /// </summary>
            View_Active_Agreement,
            /// <summary>
            /// Operation View approved bid
            /// </summary>
            View_approved_bid,
            /// <summary>
            /// Operation View Bid admin
            /// </summary>
            View_Bid_admin,
            /// <summary>
            /// Operation View bid list
            /// </summary>
            View_bid_list,
            /// <summary>
            /// Operation View bid plan
            /// </summary>
            View_bid_plan,
            /// <summary>
            /// Operation View Bid Proposals
            /// </summary>
            View_Bid_Proposals,
            /// <summary>
            /// Operation View current bid
            /// </summary>
            View_current_bid,
            /// <summary>
            /// Operation View Dispath Locations
            /// </summary>
            View_Dispath_Locations,
            /// <summary>
            /// Operation View History
            /// </summary>
            View_History,
            /// <summary>
            /// Operation View Payment History
            /// </summary>
            View_Payment_History,
            /// <summary>
            /// Operation View Payment Request
            /// </summary>
            View_Payment_Request,
            /// <summary>
            /// Operation View Price Quotation Data Entries
            /// </summary>
            View_Price_Quotation_Data_Entries,
            /// <summary>
            /// Operation View Request For Quotation
            /// </summary>
            View_Request_For_Quotation,
            /// <summary>
            /// Operation View Transport Order
            /// </summary>
            View_Transport_Order,
            /// <summary>
            /// Operation View Transport Suppliers
            /// </summary>
            View_Transport_Suppliers,
            /// <summary>
            /// Operation View Winners for Contract
            /// </summary>
            View_Winners_for_Contract,
            /// <summary>
            /// Operation Winners Dispatch Locations
            /// </summary>
            Winners_Dispatch_Locations,
        }
        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18047
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.15
//     CLR Version: v4.0.30319
//     <NetSqlAzMan-info>
//        Store: CATS
//        Application: Procurement
//        Last update: 1/9/2014 4:25:18 PM
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
namespace Cats.Services.Security
{
    using System;

    /// <summary>
    /// NetSqlAzMan ROLE Helper Class for NetSqlAzMan 'Procurement' Application 
    /// </summary>
    public partial class ROLE
    {
        /// <summary>
        /// ROLE 'Procurement Unit Coordinator'
        /// </summary>
        public const string PROCUREMENT_UNIT_COORDINATOR = "Procurement Unit Coordinator";
        /// <summary>
        /// ROLE 'Procurement-Data Encoder'
        /// </summary>
        public const string PROCUREMENT_DATA_ENCODER = "Procurement-Data Encoder";
        /// <summary>
        /// ROLE 'Procurement-Purchaser'
        /// </summary>
        public const string PROCUREMENT_PURCHASER = "Procurement-Purchaser";
    }
    /// <summary>
    /// NetSqlAzMan TASK Helper Class for NetSqlAzMan 'Procurement' Application 
    /// </summary>
    public partial class TASK
    {
        /// <summary>
        /// TASK 'Approve Bid Proposals'
        /// </summary>
        public const string APPROVE_BID_PROPOSALS = "Approve Bid Proposals";
        /// <summary>
        /// TASK 'Bid admin'
        /// </summary>
        public const string BID_ADMIN = "Bid admin";
        /// <summary>
        /// TASK 'Bid plan'
        /// </summary>
        public const string BID_PLAN = "Bid plan";
        /// <summary>
        /// TASK 'Contract Admin'
        /// </summary>
        public const string CONTRACT_ADMIN = "Contract Admin";
        /// <summary>
        /// TASK 'Generate Winners'
        /// </summary>
        public const string GENERATE_WINNERS = "Generate Winners";
        /// <summary>
        /// TASK 'Manage bid'
        /// </summary>
        public const string MANAGE_BID = "Manage bid";
        /// <summary>
        /// TASK 'Payment Request'
        /// </summary>
        public const string PAYMENT_REQUEST = "Payment Request";
        /// <summary>
        /// TASK 'Price Quotation Data Entries'
        /// </summary>
        public const string PRICE_QUOTATION_DATA_ENTRIES = "Price Quotation Data Entries";
        /// <summary>
        /// TASK 'Request For Quotation (RFQ)'
        /// </summary>
        public const string REQUEST_FOR_QUOTATION__RFQ = "Request For Quotation (RFQ)";
        /// <summary>
        /// TASK 'Transport Order'
        /// </summary>
        public const string TRANSPORT_ORDER = "Transport Order";
        /// <summary>
        /// TASK 'Transport Supplier'
        /// </summary>
        public const string TRANSPORT_SUPPLIER = "Transport Supplier";
        /// <summary>
        /// TASK 'Winners Dispatch Location'
        /// </summary>
        public const string WINNERS_DISPATCH_LOCATION = "Winners Dispatch Location";
        /// <summary>
        /// TASK 'Woreda Bid Proposal'
        /// </summary>
        public const string WOREDA_BID_PROPOSAL = "Woreda Bid Proposal";
        /// <summary>
        /// TASK 'Woreda bid Status'
        /// </summary>
        public const string WOREDA_BID_STATUS = "Woreda bid Status";
    }
    /// <summary>
    /// NetSqlAzMan OPERATION Helper Class for NetSqlAzMan 'Procurement' Application 
    /// </summary>
    public partial class OPERATION
    {
        /// <summary>
        /// OPERATION 'Add TO'
        /// </summary>
        public const string ADD_TO = "Add TO";
        /// <summary>
        /// OPERATION 'Approve TO'
        /// </summary>
        public const string APPROVE_TO = "Approve TO";
        /// <summary>
        /// OPERATION 'Assign Transporter'
        /// </summary>
        public const string ASSIGN_TRANSPORTER = "Assign Transporter";
        /// <summary>
        /// OPERATION 'Bid Planning'
        /// </summary>
        public const string BID_PLANNING = "Bid Planning";
        /// <summary>
        /// OPERATION 'Cash Check'
        /// </summary>
        public const string CASH_CHECK = "Cash Check";
        /// <summary>
        /// OPERATION 'Create new bid'
        /// </summary>
        public const string CREATE_NEW_BID = "Create new bid";
        /// <summary>
        /// OPERATION 'Create new bid plan'
        /// </summary>
        public const string CREATE_NEW_BID_PLAN = "Create new bid plan";
        /// <summary>
        /// OPERATION 'Create New Bid Proposal'
        /// </summary>
        public const string CREATE_NEW_BID_PROPOSAL = "Create New Bid Proposal";
        /// <summary>
        /// OPERATION 'Delete bid plan'
        /// </summary>
        public const string DELETE_BID_PLAN = "Delete bid plan";
        /// <summary>
        /// OPERATION 'Delete Bid Proposal'
        /// </summary>
        public const string DELETE_BID_PROPOSAL = "Delete Bid Proposal";
        /// <summary>
        /// OPERATION 'Delete Transport Supplier'
        /// </summary>
        public const string DELETE_TRANSPORT_SUPPLIER = "Delete Transport Supplier";
        /// <summary>
        /// OPERATION 'Edit bid'
        /// </summary>
        public const string EDIT_BID = "Edit bid";
        /// <summary>
        /// OPERATION 'Edit bid plan'
        /// </summary>
        public const string EDIT_BID_PLAN = "Edit bid plan";
        /// <summary>
        /// OPERATION 'Edit Bid Proposal'
        /// </summary>
        public const string EDIT_BID_PROPOSAL = "Edit Bid Proposal";
        /// <summary>
        /// OPERATION 'Edit bid proposal details'
        /// </summary>
        public const string EDIT_BID_PROPOSAL_DETAILS = "Edit bid proposal details";
        /// <summary>
        /// OPERATION 'Edit TO'
        /// </summary>
        public const string EDIT_TO = "Edit TO";
        /// <summary>
        /// OPERATION 'Edit Transport Supplier'
        /// </summary>
        public const string EDIT_TRANSPORT_SUPPLIER = "Edit Transport Supplier";
        /// <summary>
        /// OPERATION 'Export bid'
        /// </summary>
        public const string EXPORT_BID = "Export bid";
        /// <summary>
        /// OPERATION 'Export bid plan'
        /// </summary>
        public const string EXPORT_BID_PLAN = "Export bid plan";
        /// <summary>
        /// OPERATION 'Export Payment Request'
        /// </summary>
        public const string EXPORT_PAYMENT_REQUEST = "Export Payment Request";
        /// <summary>
        /// OPERATION 'Generate Agreement'
        /// </summary>
        public const string GENERATE_AGREEMENT = "Generate Agreement";
        /// <summary>
        /// OPERATION 'Generate Winners for a bid'
        /// </summary>
        public const string GENERATE_WINNERS_FOR_A_BID = "Generate Winners for a bid";
        /// <summary>
        /// OPERATION 'Issue Check'
        /// </summary>
        public const string ISSUE_CHECK = "Issue Check";
        /// <summary>
        /// OPERATION 'Manage Bids'
        /// </summary>
        public const string MANAGE_BIDS = "Manage Bids";
        /// <summary>
        /// OPERATION 'New Payment Request'
        /// </summary>
        public const string NEW_PAYMENT_REQUEST = "New Payment Request";
        /// <summary>
        /// OPERATION 'New Transport Supplier'
        /// </summary>
        public const string NEW_TRANSPORT_SUPPLIER = "New Transport Supplier";
        /// <summary>
        /// OPERATION 'Price Quotation Data Entry'
        /// </summary>
        public const string PRICE_QUOTATION_DATA_ENTRY = "Price Quotation Data Entry";
        /// <summary>
        /// OPERATION 'Print bid'
        /// </summary>
        public const string PRINT_BID = "Print bid";
        /// <summary>
        /// OPERATION 'Print bid plan'
        /// </summary>
        public const string PRINT_BID_PLAN = "Print bid plan";
        /// <summary>
        /// OPERATION 'Print Contract'
        /// </summary>
        public const string PRINT_CONTRACT = "Print Contract";
        /// <summary>
        /// OPERATION 'Print Payment request'
        /// </summary>
        public const string PRINT_PAYMENT_REQUEST = "Print Payment request";
        /// <summary>
        /// OPERATION 'Print RFQ'
        /// </summary>
        public const string PRINT_RFQ = "Print RFQ";
        /// <summary>
        /// OPERATION 'Reject Approval'
        /// </summary>
        public const string REJECT_APPROVAL = "Reject Approval";
        /// <summary>
        /// OPERATION 'Request Approval'
        /// </summary>
        public const string REQUEST_APPROVAL = "Request Approval";
        /// <summary>
        /// OPERATION 'Transport Suppliers'
        /// </summary>
        public const string TRANSPORT_SUPPLIERS = "Transport Suppliers";
        /// <summary>
        /// OPERATION 'Transport warehouse assignment'
        /// </summary>
        public const string TRANSPORT_WAREHOUSE_ASSIGNMENT = "Transport warehouse assignment";
        /// <summary>
        /// OPERATION 'View Active Agreement'
        /// </summary>
        public const string VIEW_ACTIVE_AGREEMENT = "View Active Agreement";
        /// <summary>
        /// OPERATION 'View approved bid'
        /// </summary>
        public const string VIEW_APPROVED_BID = "View approved bid";
        /// <summary>
        /// OPERATION 'View Bid admin'
        /// </summary>
        public const string VIEW_BID_ADMIN = "View Bid admin";
        /// <summary>
        /// OPERATION 'View bid list'
        /// </summary>
        public const string VIEW_BID_LIST = "View bid list";
        /// <summary>
        /// OPERATION 'View bid plan'
        /// </summary>
        public const string VIEW_BID_PLAN = "View bid plan";
        /// <summary>
        /// OPERATION 'View Bid Proposals'
        /// </summary>
        public const string VIEW_BID_PROPOSALS = "View Bid Proposals";
        /// <summary>
        /// OPERATION 'View current bid'
        /// </summary>
        public const string VIEW_CURRENT_BID = "View current bid";
        /// <summary>
        /// OPERATION 'View Dispath Locations'
        /// </summary>
        public const string VIEW_DISPATH_LOCATIONS = "View Dispath Locations";
        /// <summary>
        /// OPERATION 'View History'
        /// </summary>
        public const string VIEW_HISTORY = "View History";
        /// <summary>
        /// OPERATION 'View Payment History'
        /// </summary>
        public const string VIEW_PAYMENT_HISTORY = "View Payment History";
        /// <summary>
        /// OPERATION 'View Payment Request'
        /// </summary>
        public const string VIEW_PAYMENT_REQUEST = "View Payment Request";
        /// <summary>
        /// OPERATION 'View Price Quotation Data Entries'
        /// </summary>
        public const string VIEW_PRICE_QUOTATION_DATA_ENTRIES = "View Price Quotation Data Entries";
        /// <summary>
        /// OPERATION 'View Request For Quotation'
        /// </summary>
        public const string VIEW_REQUEST_FOR_QUOTATION = "View Request For Quotation";
        /// <summary>
        /// OPERATION 'View Transport Order'
        /// </summary>
        public const string VIEW_TRANSPORT_ORDER = "View Transport Order";
        /// <summary>
        /// OPERATION 'View Transport Suppliers'
        /// </summary>
        public const string VIEW_TRANSPORT_SUPPLIERS = "View Transport Suppliers";
        /// <summary>
        /// OPERATION 'View Winners for Contract'
        /// </summary>
        public const string VIEW_WINNERS_FOR_CONTRACT = "View Winners for Contract";
        /// <summary>
        /// OPERATION 'Winners Dispatch Locations'
        /// </summary>
        public const string WINNERS_DISPATCH_LOCATIONS = "Winners Dispatch Locations";
    }
}


////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was generated by a tool.
////     Runtime Version:4.0.30319.17929
////
////     Changes to this file may cause incorrect behavior and will be lost if
////     the code is regenerated.
//// </auto-generated>
////------------------------------------------------------------------------------

//// ------------------------------------------------------------------------------
////  <auto-generated>
////     This code was generated by NetSqlAzMan CodeDom.
////     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
////     NetSqlAzMan Version: 3.6.0.15
////     CLR Version: v4.0.30319
////     <NetSqlAzMan-info>
////        Store: CATS
////        Application: Procurement
////        Last update: 10/30/2013 10:41:43 AM
////     </NetSqlAzMan-info>
////  </auto-generated>
//// ------------------------------------------------------------------------------
//// 
//// 
//// TODO: Add NetSqlAzMan.dll Assembly reference.
//// 
//// 
//namespace Cats.Services.Security
//{
//    using System;
//    using System.Security.Principal;
//    using System.Collections.Generic;
//    using System.Text;
//    using NetSqlAzMan;
//    using NetSqlAzMan.Interfaces;

//    /// <summary>
//    /// NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'Procurement' Application 
//    /// </summary>
//    public partial class ProcurementCheckAccess : IProcurementCheckAccess
//    {
//        #region Constants
//        /// <summary>
//        /// Store Name
//        /// </summary>
//        protected internal const string STORE_NAME = "CATS";
//        /// <summary>
//        /// Application Name
//        /// </summary>
//        protected internal const string APPLICATION_NAME = "Procurement";
//        #endregion
//        #region Fields
//        /// <summary>
//        /// NetSqlAzMan Storage reference.
//        /// </summary>
//        protected NetSqlAzMan.Interfaces.IAzManStorage mStorage;
//        /// <summary>
//        /// User Windows Principal Identity.
//        /// </summary>
//        protected System.Security.Principal.WindowsIdentity windowsIdentity;
//        #endregion
//        #region Constructors
//        /// <summary>
//        /// Initializes a new instance of the <see cref="T:ProcurementCheckAccess"/> class [Windows Users ONLY].
//        /// </summary>
//        /// <param name="storageConnectionString">The storage connection string.</param>
//        /// <param name="windowsIdentity">The Windows Principal Identity.</param>
//        public ProcurementCheckAccess(string storageConnectionString, System.Security.Principal.WindowsIdentity windowsIdentity)
//        {
//            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
//            this.windowsIdentity = windowsIdentity;
//        }
//        /// <summary>
//        /// Initializes a new instance of the <see cref="T:ProcurementCheckAccess"/> class [DB Users ONLY].
//        /// </summary>
//        /// <param name="storageConnectionString">The storage connection string.</param>
//        public ProcurementCheckAccess(string storageConnectionString)
//        {
//            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
//        }
//        #endregion
//        #region Properties
//        /// <summary>
//        /// Gets the NetSqlAzMan Storage.
//        /// </summary>
//        public virtual NetSqlAzMan.Interfaces.IAzManStorage Storage
//        {
//            get
//            {
//                return this.mStorage;
//            }
//        }
//        #endregion
//        #region Methods
//        /// <summary>
//        /// Opens the connection
//        /// </summary>
//        public virtual void OpenConnection()
//        {
//            this.mStorage.OpenConnection();
//        }
//        /// <summary>
//        /// Closes the connection
//        /// </summary>
//        public virtual void CloseConnection()
//        {
//            this.mStorage.CloseConnection();
//        }
//        /// <summary>
//        /// Retrieve Item name from a Role Enum.
//        /// </summary>
//        /// <param name="role">The role.</param>
//        /// <returns>The Role Name.</returns>
//        public virtual string ItemName(Role role)
//        {
//            if ((role == Role.Procurement_Unit_Coordinator))
//            {
//                return "Procurement Unit Coordinator";
//            }
//            if ((role == Role.Procurement_Data_Encoder))
//            {
//                return "Procurement-Data Encoder";
//            }
//            if ((role == Role.Procurement_Purchaser))
//            {
//                return "Procurement-Purchaser";
//            }
//            throw new System.ArgumentException("Unknown Role name", "role");
//        }
//        /// <summary>
//        /// Retrieve Item name from a Task Enum.
//        /// </summary>
//        /// <param name="task">The task.</param>
//        /// <returns>The Task Name.</returns>
//        public virtual string ItemName(Task task)
//        {
//            if ((task == Task.Bid_plan))
//            {
//                return "Bid plan";
//            }
//            if ((task == Task.Manage_bid))
//            {
//                return "Manage bid";
//            }
//            if ((task == Task.Price_Quotation_Data_Entries))
//            {
//                return "Price Quotation Data Entries";
//            }
//            if ((task == Task.Request_For_Quotation__RFQ))
//            {
//                return "Request For Quotation (RFQ)";
//            }
//            if ((task == Task.Transport_Order))
//            {
//                return "Transport Order";
//            }
//            if ((task == Task.Transport_Supplier))
//            {
//                return "Transport Supplier";
//            }
//            if ((task == Task.Winners_Dispatch_Location))
//            {
//                return "Winners Dispatch Location";
//            }
//            throw new System.ArgumentException("Unknown Task name", "task");
//        }
//        /// <summary>
//        /// Retrieve Item name from a Operation Enum.
//        /// </summary>
//        /// <param name="operation">The operation.</param>
//        /// <returns>The Operation Name.</returns>
//        public virtual string ItemName(Operation operation)
//        {
//            if ((operation == Operation.Add_TO))
//            {
//                return "Add TO";
//            }
//            if ((operation == Operation.Approve_TO))
//            {
//                return "Approve TO";
//            }
//            if ((operation == Operation.Assign_Transporter))
//            {
//                return "Assign Transporter";
//            }
//            if ((operation == Operation.Bid_Planning))
//            {
//                return "Bid Planning";
//            }
//            if ((operation == Operation.Create_new_bid))
//            {
//                return "Create new bid";
//            }
//            if ((operation == Operation.Create_new_bid_plan))
//            {
//                return "Create new bid plan";
//            }
//            if ((operation == Operation.Delet_Price_Quotation_Data_Entry))
//            {
//                return "Delet Price Quotation Data Entry";
//            }
//            if ((operation == Operation.Delete_bid_plan))
//            {
//                return "Delete bid plan";
//            }
//            if ((operation == Operation.Delete_Transport_Supplier))
//            {
//                return "Delete Transport Supplier";
//            }
//            if ((operation == Operation.Edit_bid))
//            {
//                return "Edit bid";
//            }
//            if ((operation == Operation.Edit_bid_plan))
//            {
//                return "Edit bid plan";
//            }
//            if ((operation == Operation.Edit_Price_Quotation_Data_Entry))
//            {
//                return "Edit Price Quotation Data Entry";
//            }
//            if ((operation == Operation.Edit_TO))
//            {
//                return "Edit TO";
//            }
//            if ((operation == Operation.Edit_Transport_Supplier))
//            {
//                return "Edit Transport Supplier";
//            }
//            if ((operation == Operation.Export_bid))
//            {
//                return "Export bid";
//            }
//            if ((operation == Operation.Export_bid_plan))
//            {
//                return "Export bid plan";
//            }
//            if ((operation == Operation.Manage_Bids))
//            {
//                return "Manage Bids";
//            }
//            if ((operation == Operation.New_Transport_Supplier))
//            {
//                return "New Transport Supplier";
//            }
//            if ((operation == Operation.Price_Quotation_Data_Entry))
//            {
//                return "Price Quotation Data Entry";
//            }
//            if ((operation == Operation.Print_bid))
//            {
//                return "Print bid";
//            }
//            if ((operation == Operation.Print_bid_plan))
//            {
//                return "Print bid plan";
//            }
//            if ((operation == Operation.Request_For_Quotations__RFQ))
//            {
//                return "Request For Quotations (RFQ)";
//            }
//            if ((operation == Operation.Transport_Suppliers))
//            {
//                return "Transport Suppliers";
//            }
//            if ((operation == Operation.Transport_warehouse_assignment))
//            {
//                return "Transport warehouse assignment";
//            }
//            if ((operation == Operation.View_approved_bid))
//            {
//                return "View approved bid";
//            }
//            if ((operation == Operation.View_bid_list))
//            {
//                return "View bid list";
//            }
//            if ((operation == Operation.View_bid_plan))
//            {
//                return "View bid plan";
//            }
//            if ((operation == Operation.View_current_bid))
//            {
//                return "View current bid";
//            }
//            if ((operation == Operation.View_Dispath_Locations))
//            {
//                return "View Dispath Locations";
//            }
//            if ((operation == Operation.View_Price_Quotation_Data_Entries))
//            {
//                return "View Price Quotation Data Entries";
//            }
//            if ((operation == Operation.View_Request_For_Quotation))
//            {
//                return "View Request For Quotation";
//            }
//            if ((operation == Operation.View_Transport_Order))
//            {
//                return "View Transport Order";
//            }
//            if ((operation == Operation.View_Transport_Suppliers))
//            {
//                return "View Transport Suppliers";
//            }
//            if ((operation == Operation.Winners_Dispatch_Locations))
//            {
//                return "Winners Dispatch Locations";
//            }
//            throw new System.ArgumentException("Unknown Operation name", "operation");
//        }
//        /// <summary>
//        /// Checks the access [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="itemName">The Item Name.</param>
//        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, contextParameters);
//        }
//        /// <summary>
//        /// Checks the access [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="itemName">The Item Name.</param>
//        /// <param name="dbUserName">The DB User Name.</param>
//        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, contextParameters);
//        }
//        /// <summary>
//        /// Checks the access [FOR custom SID ONLY].
//        /// </summary>
//        /// <param name="itemName">The Item Name.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, contextParameters);
//        }
//        /// <summary>
//        /// Checks the access [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="itemName">The Item Name.</param>
//        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Checks the access [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="itemName">The Item Name.</param>
//        /// <param name="dbUserName">The DB User Name.</param>
//        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Checks the access [FOR Custom SID ONLY].
//        /// </summary>
//        /// <param name="itemName">The Item Name.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.mStorage.CheckAccess(ProcurementCheckAccess.STORE_NAME, ProcurementCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(role), false, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(role), dbUserName, false, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Custom SID ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(role), customSID, false, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(role), false, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(role), dbUserName, false, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Custom SID ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(role), customSID, false, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(task), false, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(task), dbUserName, false, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Custom SID ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="customSID">The Custom SID.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(task), customSID, false, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(task), false, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(task), dbUserName, false, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR custom SID ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="customSID">The Custom SID.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(task), customSID, false, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(operation), true, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(operation), dbUserName, true, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Custom SID ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="customSID">The Custom SID.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(operation), customSID, true, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(operation), true, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(operation), dbUserName, true, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Gets the Authorization Type [FOR custom SID ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="customSID">The Custom SID.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
//        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            return this.CheckAccess(this.ItemName(operation), customSID, true, out attributes, contextParameters);
//        }
//        /// <summary>
//        /// Checks the access [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Role role, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR custom SID ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR Custom SID ONLY].
//        /// </summary>
//        /// <param name="role">The Role.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Task task, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR Custom SID ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="customSID">The Custom SID.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR Custom SID ONLY].
//        /// </summary>
//        /// <param name="task">The Task.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Operation operation, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR custom SID ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR Windows Users ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR DB Users ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="dbUserName">The DB UserName.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        /// <summary>
//        /// Checks the access [FOR custom SID ONLY].
//        /// </summary>
//        /// <param name="operation">The Operation.</param>
//        /// <param name="customSID">The custom SID.</param>
//        /// <param name="attributes">Retrieved attributes.</param>
//        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
//        /// <returns>True for Access Granted, False for Access Denied.</returns>
//        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
//        {
//            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, out attributes, contextParameters);
//            return ((result == AuthorizationType.AllowWithDelegation)
//                        || (result == AuthorizationType.Allow));
//        }
//        #endregion
//        #region Enums
//        /// <summary>
//        /// Roles Enumeration
//        /// </summary>
//        public enum Role
//        {
//            /// <summary>
//            /// Role Procurement Unit Coordinator
//            /// </summary>
//            Procurement_Unit_Coordinator,
//            /// <summary>
//            /// Role Procurement-Data Encoder
//            /// </summary>
//            Procurement_Data_Encoder,
//            /// <summary>
//            /// Role Procurement-Purchaser
//            /// </summary>
//            Procurement_Purchaser,
//        }
//        /// <summary>
//        /// Tasks Enumeration
//        /// </summary>
//        public enum Task
//        {
//            /// <summary>
//            /// Task Bid plan
//            /// </summary>
//            Bid_plan,
//            /// <summary>
//            /// Task Manage bid
//            /// </summary>
//            Manage_bid,
//            /// <summary>
//            /// Task Price Quotation Data Entries
//            /// </summary>
//            Price_Quotation_Data_Entries,
//            /// <summary>
//            /// Task Request For Quotation (RFQ)
//            /// </summary>
//            Request_For_Quotation__RFQ,
//            /// <summary>
//            /// Task Transport Order
//            /// </summary>
//            Transport_Order,
//            /// <summary>
//            /// Task Transport Supplier
//            /// </summary>
//            Transport_Supplier,
//            /// <summary>
//            /// Task Winners Dispatch Location
//            /// </summary>
//            Winners_Dispatch_Location,
//        }
//        /// <summary>
//        /// Operations Enumeration
//        /// </summary>
//        public enum Operation
//        {
//            /// <summary>
//            /// Operation Add TO
//            /// </summary>
//            Add_TO,
//            /// <summary>
//            /// Operation Approve TO
//            /// </summary>
//            Approve_TO,
//            /// <summary>
//            /// Operation Assign Transporter
//            /// </summary>
//            Assign_Transporter,
//            /// <summary>
//            /// Operation Bid Planning
//            /// </summary>
//            Bid_Planning,
//            /// <summary>
//            /// Operation Create new bid
//            /// </summary>
//            Create_new_bid,
//            /// <summary>
//            /// Operation Create new bid plan
//            /// </summary>
//            Create_new_bid_plan,
//            /// <summary>
//            /// Operation Delet Price Quotation Data Entry
//            /// </summary>
//            Delet_Price_Quotation_Data_Entry,
//            /// <summary>
//            /// Operation Delete bid plan
//            /// </summary>
//            Delete_bid_plan,
//            /// <summary>
//            /// Operation Delete Transport Supplier
//            /// </summary>
//            Delete_Transport_Supplier,
//            /// <summary>
//            /// Operation Edit bid
//            /// </summary>
//            Edit_bid,
//            /// <summary>
//            /// Operation Edit bid plan
//            /// </summary>
//            Edit_bid_plan,
//            /// <summary>
//            /// Operation Edit Price Quotation Data Entry
//            /// </summary>
//            Edit_Price_Quotation_Data_Entry,
//            /// <summary>
//            /// Operation Edit TO
//            /// </summary>
//            Edit_TO,
//            /// <summary>
//            /// Operation Edit Transport Supplier
//            /// </summary>
//            Edit_Transport_Supplier,
//            /// <summary>
//            /// Operation Export bid
//            /// </summary>
//            Export_bid,
//            /// <summary>
//            /// Operation Export bid plan
//            /// </summary>
//            Export_bid_plan,
//            /// <summary>
//            /// Operation Manage Bids
//            /// </summary>
//            Manage_Bids,
//            /// <summary>
//            /// Operation New Transport Supplier
//            /// </summary>
//            New_Transport_Supplier,
//            /// <summary>
//            /// Operation Price Quotation Data Entry
//            /// </summary>
//            Price_Quotation_Data_Entry,
//            /// <summary>
//            /// Operation Print bid
//            /// </summary>
//            Print_bid,
//            /// <summary>
//            /// Operation Print bid plan
//            /// </summary>
//            Print_bid_plan,
//            /// <summary>
//            /// Operation Request For Quotations (RFQ)
//            /// </summary>
//            Request_For_Quotations__RFQ,
//            /// <summary>
//            /// Operation Transport Suppliers
//            /// </summary>
//            Transport_Suppliers,
//            /// <summary>
//            /// Operation Transport warehouse assignment
//            /// </summary>
//            Transport_warehouse_assignment,
//            /// <summary>
//            /// Operation View approved bid
//            /// </summary>
//            View_approved_bid,
//            /// <summary>
//            /// Operation View bid list
//            /// </summary>
//            View_bid_list,
//            /// <summary>
//            /// Operation View bid plan
//            /// </summary>
//            View_bid_plan,
//            /// <summary>
//            /// Operation View current bid
//            /// </summary>
//            View_current_bid,
//            /// <summary>
//            /// Operation View Dispath Locations
//            /// </summary>
//            View_Dispath_Locations,
//            /// <summary>
//            /// Operation View Price Quotation Data Entries
//            /// </summary>
//            View_Price_Quotation_Data_Entries,
//            /// <summary>
//            /// Operation View Request For Quotation
//            /// </summary>
//            View_Request_For_Quotation,
//            /// <summary>
//            /// Operation View Transport Order
//            /// </summary>
//            View_Transport_Order,
//            /// <summary>
//            /// Operation View Transport Suppliers
//            /// </summary>
//            View_Transport_Suppliers,
//            /// <summary>
//            /// Operation Winners Dispatch Locations
//            /// </summary>
//            Winners_Dispatch_Locations,
//        }
//        #endregion
//    }
//}

////------------------------------------------------------------------------------
//// <auto-generated>
////     This code was generated by a tool.
////     Runtime Version:4.0.30319.17929
////
////     Changes to this file may cause incorrect behavior and will be lost if
////     the code is regenerated.
//// </auto-generated>
////------------------------------------------------------------------------------

//// ------------------------------------------------------------------------------
////  <auto-generated>
////     This code was generated by NetSqlAzMan CodeDom.
////     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
////     NetSqlAzMan Version: 3.6.0.15
////     CLR Version: v4.0.30319
////     <NetSqlAzMan-info>
////        Store: CATS
////        Application: Procurement
////        Last update: 10/30/2013 10:41:43 AM
////     </NetSqlAzMan-info>
////  </auto-generated>
//// ------------------------------------------------------------------------------
//// 
//namespace Procurement.Security
//{
//    using System;

//    /// <summary>
//    /// NetSqlAzMan ROLE Helper Class for NetSqlAzMan 'Procurement' Application 
//    /// </summary>
//    public partial class ROLE
//    {
//        /// <summary>
//        /// ROLE 'Procurement Unit Coordinator'
//        /// </summary>
//        public const string PROCUREMENT_UNIT_COORDINATOR = "Procurement Unit Coordinator";
//        /// <summary>
//        /// ROLE 'Procurement-Data Encoder'
//        /// </summary>
//        public const string PROCUREMENT_DATA_ENCODER = "Procurement-Data Encoder";
//        /// <summary>
//        /// ROLE 'Procurement-Purchaser'
//        /// </summary>
//        public const string PROCUREMENT_PURCHASER = "Procurement-Purchaser";
//    }
//    /// <summary>
//    /// NetSqlAzMan TASK Helper Class for NetSqlAzMan 'Procurement' Application 
//    /// </summary>
//    public partial class TASK
//    {
//        /// <summary>
//        /// TASK 'Bid plan'
//        /// </summary>
//        public const string BID_PLAN = "Bid plan";
//        /// <summary>
//        /// TASK 'Manage bid'
//        /// </summary>
//        public const string MANAGE_BID = "Manage bid";
//        /// <summary>
//        /// TASK 'Price Quotation Data Entries'
//        /// </summary>
//        public const string PRICE_QUOTATION_DATA_ENTRIES = "Price Quotation Data Entries";
//        /// <summary>
//        /// TASK 'Request For Quotation (RFQ)'
//        /// </summary>
//        public const string REQUEST_FOR_QUOTATION__RFQ = "Request For Quotation (RFQ)";
//        /// <summary>
//        /// TASK 'Transport Order'
//        /// </summary>
//        public const string TRANSPORT_ORDER = "Transport Order";
//        /// <summary>
//        /// TASK 'Transport Supplier'
//        /// </summary>
//        public const string TRANSPORT_SUPPLIER = "Transport Supplier";
//        /// <summary>
//        /// TASK 'Winners Dispatch Location'
//        /// </summary>
//        public const string WINNERS_DISPATCH_LOCATION = "Winners Dispatch Location";
//    }

//    /// <summary>
//    /// NetSqlAzMan OPERATION Helper Class for NetSqlAzMan 'Procurement' Application 
//    /// </summary>
//    public partial class OPERATION
//    {
//        /// <summary>
//        /// OPERATION 'Add TO'
//        /// </summary>
//        public const string ADD_TO = "Add TO";
//        /// <summary>
//        /// OPERATION 'Approve TO'
//        /// </summary>
//        public const string APPROVE_TO = "Approve TO";
//        /// <summary>
//        /// OPERATION 'Assign Transporter'
//        /// </summary>
//        public const string ASSIGN_TRANSPORTER = "Assign Transporter";
//        /// <summary>
//        /// OPERATION 'Bid Planning'
//        /// </summary>
//        public const string BID_PLANNING = "Bid Planning";
//        /// <summary>
//        /// OPERATION 'Create new bid'
//        /// </summary>
//        public const string CREATE_NEW_BID = "Create new bid";
//        /// <summary>
//        /// OPERATION 'Create new bid plan'
//        /// </summary>
//        public const string CREATE_NEW_BID_PLAN = "Create new bid plan";
//        /// <summary>
//        /// OPERATION 'Delet Price Quotation Data Entry'
//        /// </summary>
//        public const string DELET_PRICE_QUOTATION_DATA_ENTRY = "Delet Price Quotation Data Entry";
//        /// <summary>
//        /// OPERATION 'Delete bid plan'
//        /// </summary>
//        public const string DELETE_BID_PLAN = "Delete bid plan";
//        /// <summary>
//        /// OPERATION 'Delete Transport Supplier'
//        /// </summary>
//        public const string DELETE_TRANSPORT_SUPPLIER = "Delete Transport Supplier";
//        /// <summary>
//        /// OPERATION 'Edit bid'
//        /// </summary>
//        public const string EDIT_BID = "Edit bid";
//        /// <summary>
//        /// OPERATION 'Edit bid plan'
//        /// </summary>
//        public const string EDIT_BID_PLAN = "Edit bid plan";
//        /// <summary>
//        /// OPERATION 'Edit Price Quotation Data Entry'
//        /// </summary>
//        public const string EDIT_PRICE_QUOTATION_DATA_ENTRY = "Edit Price Quotation Data Entry";
//        /// <summary>
//        /// OPERATION 'Edit TO'
//        /// </summary>
//        public const string EDIT_TO = "Edit TO";
//        /// <summary>
//        /// OPERATION 'Edit Transport Supplier'
//        /// </summary>
//        public const string EDIT_TRANSPORT_SUPPLIER = "Edit Transport Supplier";
//        /// <summary>
//        /// OPERATION 'Export bid'
//        /// </summary>
//        public const string EXPORT_BID = "Export bid";
//        /// <summary>
//        /// OPERATION 'Export bid plan'
//        /// </summary>
//        public const string EXPORT_BID_PLAN = "Export bid plan";
//        /// <summary>
//        /// OPERATION 'Manage Bids'
//        /// </summary>
//        public const string MANAGE_BIDS = "Manage Bids";
//        /// <summary>
//        /// OPERATION 'New Transport Supplier'
//        /// </summary>
//        public const string NEW_TRANSPORT_SUPPLIER = "New Transport Supplier";
//        /// <summary>
//        /// OPERATION 'Price Quotation Data Entry'
//        /// </summary>
//        public const string PRICE_QUOTATION_DATA_ENTRY = "Price Quotation Data Entry";
//        /// <summary>
//        /// OPERATION 'Print bid'
//        /// </summary>
//        public const string PRINT_BID = "Print bid";
//        /// <summary>
//        /// OPERATION 'Print bid plan'
//        /// </summary>
//        public const string PRINT_BID_PLAN = "Print bid plan";
//        /// <summary>
//        /// OPERATION 'Request For Quotations (RFQ)'
//        /// </summary>
//        public const string REQUEST_FOR_QUOTATIONS__RFQ = "Request For Quotations (RFQ)";
//        /// <summary>
//        /// OPERATION 'Transport Suppliers'
//        /// </summary>
//        public const string TRANSPORT_SUPPLIERS = "Transport Suppliers";
//        /// <summary>
//        /// OPERATION 'Transport warehouse assignment'
//        /// </summary>
//        public const string TRANSPORT_WAREHOUSE_ASSIGNMENT = "Transport warehouse assignment";
//        /// <summary>
//        /// OPERATION 'View approved bid'
//        /// </summary>
//        public const string VIEW_APPROVED_BID = "View approved bid";
//        /// <summary>
//        /// OPERATION 'View bid list'
//        /// </summary>
//        public const string VIEW_BID_LIST = "View bid list";
//        /// <summary>
//        /// OPERATION 'View bid plan'
//        /// </summary>
//        public const string VIEW_BID_PLAN = "View bid plan";
//        /// <summary>
//        /// OPERATION 'View current bid'
//        /// </summary>
//        public const string VIEW_CURRENT_BID = "View current bid";
//        /// <summary>
//        /// OPERATION 'View Dispath Locations'
//        /// </summary>
//        public const string VIEW_DISPATH_LOCATIONS = "View Dispath Locations";
//        /// <summary>
//        /// OPERATION 'View Price Quotation Data Entries'
//        /// </summary>
//        public const string VIEW_PRICE_QUOTATION_DATA_ENTRIES = "View Price Quotation Data Entries";
//        /// <summary>
//        /// OPERATION 'View Request For Quotation'
//        /// </summary>
//        public const string VIEW_REQUEST_FOR_QUOTATION = "View Request For Quotation";
//        /// <summary>
//        /// OPERATION 'View Transport Order'
//        /// </summary>
//        public const string VIEW_TRANSPORT_ORDER = "View Transport Order";
//        /// <summary>
//        /// OPERATION 'View Transport Suppliers'
//        /// </summary>
//        public const string VIEW_TRANSPORT_SUPPLIERS = "View Transport Suppliers";
//        /// <summary>
//        /// OPERATION 'Winners Dispatch Locations'
//        /// </summary>
//        public const string WINNERS_DISPATCH_LOCATIONS = "Winners Dispatch Locations";
//    }
//}
