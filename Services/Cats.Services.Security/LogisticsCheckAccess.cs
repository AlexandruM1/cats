using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Cats.Services.Security;


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.15
//     CLR Version: v4.0.30319
//     <NetSqlAzMan-info>
//        Store: CATS
//        Application: Logistics
//        Last update: 11/12/2013 11:07:48 AM
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
// 
// TODO: Add NetSqlAzMan.dll Assembly reference.
// 
// 
namespace Logistics.Security
{
    using System;
    using System.Security.Principal;
    using System.Collections.Generic;
    using System.Text;
    using NetSqlAzMan;
    using NetSqlAzMan.Interfaces;

    /// <summary>
    /// NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'Logistics' Application 
    /// </summary>
    public partial class LogisticsCheckAccess : ILogisticsCheckAccess
    {
        #region Constants
        /// <summary>
        /// Store Name
        /// </summary>
        protected internal const string STORE_NAME = "CATS";
        /// <summary>
        /// Application Name
        /// </summary>
        protected internal const string APPLICATION_NAME = "Logistics";
        #endregion
        #region Fields
        /// <summary>
        /// NetSqlAzMan Storage reference.
        /// </summary>
        protected NetSqlAzMan.Interfaces.IAzManStorage mStorage;
        /// <summary>
        /// User Windows Principal Identity.
        /// </summary>
        protected System.Security.Principal.WindowsIdentity windowsIdentity;
        #endregion
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="T:LogisticsCheckAccess"/> class [Windows Users ONLY].
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        /// <param name="windowsIdentity">The Windows Principal Identity.</param>
        public LogisticsCheckAccess(string storageConnectionString, System.Security.Principal.WindowsIdentity windowsIdentity)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
            this.windowsIdentity = windowsIdentity;
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="T:LogisticsCheckAccess"/> class [DB Users ONLY].
        /// </summary>
        /// <param name="storageConnectionString">The storage connection string.</param>
        public LogisticsCheckAccess(string storageConnectionString)
        {
            this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
        }
        #endregion
        #region Properties
        /// <summary>
        /// Gets the NetSqlAzMan Storage.
        /// </summary>
        public virtual NetSqlAzMan.Interfaces.IAzManStorage Storage
        {
            get
            {
                return this.mStorage;
            }
        }
        #endregion
        #region Methods
        /// <summary>
        /// Opens the connection
        /// </summary>
        public virtual void OpenConnection()
        {
            this.mStorage.OpenConnection();
        }
        /// <summary>
        /// Closes the connection
        /// </summary>
        public virtual void CloseConnection()
        {
            this.mStorage.CloseConnection();
        }
        /// <summary>
        /// Retrieve Item name from a Role Enum.
        /// </summary>
        /// <param name="role">The role.</param>
        /// <returns>The Role Name.</returns>
        public virtual string ItemName(Role role)
        {
            if ((role == Role.LG_Account_Verification_Expert_issue))
            {
                return "LG-Account Verification Expert(issue)";
            }
            if ((role == Role.LG_Addis_Storage___Distribution))
            {
                return "LG-Addis Storage & Distribution";
            }
            if ((role == Role.LG_Agreement___Processor_issue))
            {
                return "LG-Agreement & Processor(issue)";
            }
            if ((role == Role.LG_Allocation_Award___Followup))
            {
                return "LG-Allocation Award & Followup";
            }
            if ((role == Role.LG_Coordinator))
            {
                return "LG-Coordinator";
            }
            if ((role == Role.LG_Coordinator_issue))
            {
                return "LG-Coordinator(issue)";
            }
            if ((role == Role.LG_Data_Encoder_issue))
            {
                return "LG-Data Encoder(issue)";
            }
            if ((role == Role.LG_Evaluation))
            {
                return "LG-Evaluation";
            }
            if ((role == Role.LG_Followup_Expert_issue))
            {
                return "LG-Followup Expert(issue)";
            }
            if ((role == Role.LG_Legal_Officer))
            {
                return "LG-Legal Officer";
            }
            if ((role == Role.LG_Monitoring___Evaluation_utilization))
            {
                return "LG-Monitoring & Evaluation(utilization)";
            }
            if ((role == Role.LG_Performance_Evaluator))
            {
                return "LG-Performance Evaluator";
            }
            if ((role == Role.LG_Pipeline_Officer))
            {
                return "LG-Pipeline Officer";
            }
            if ((role == Role.LG_Report_Compilation))
            {
                return "LG-Report Compilation";
            }
            if ((role == Role.LG_Secretory))
            {
                return "LG-Secretory";
            }
            if ((role == Role.LG_Storage___Distribution_Expert_issue))
            {
                return "LG-Storage & Distribution Expert(issue)";
            }
            if ((role == Role.LG_Store_Keeper))
            {
                return "LG-Store Keeper";
            }
            if ((role == Role.LG_Transport_Officer))
            {
                return "LG-Transport Officer";
            }
            if ((role == Role.LG_Transport_Order_Issue_issue))
            {
                return "LG-Transport Order Issue(issue)";
            }
            throw new System.ArgumentException("Unknown Role name", "role");
        }
        /// <summary>
        /// Retrieve Item name from a Task Enum.
        /// </summary>
        /// <param name="task">The task.</param>
        /// <returns>The Task Name.</returns>
        public virtual string ItemName(Task task)
        {
            if ((task == Task.Approve_bid))
            {
                return "Approve bid";
            }
            if ((task == Task.Bid_winner_transporters))
            {
                return "Bid winner transporters";
            }
            if ((task == Task.Dispatch_Allocation))
            {
                return "Dispatch Allocation";
            }
            if ((task == Task.Logistic_Dashboard))
            {
                return "Logistic Dashboard";
            }
            if ((task == Task.Manage_RFQ))
            {
                return "Manage RFQ";
            }
            if ((task == Task.Manage_transport_suppliers))
            {
                return "Manage transport suppliers";
            }
            if ((task == Task.Resource_Allocation))
            {
                return "Resource Allocation";
            }
            if ((task == Task.Stock))
            {
                return "Stock";
            }
            if ((task == Task.Transport_Order))
            {
                return "Transport Order";
            }
            if ((task == Task.Transport_Requisition))
            {
                return "Transport Requisition";
            }
            throw new System.ArgumentException("Unknown Task name", "task");
        }
        /// <summary>
        /// Retrieve Item name from a Operation Enum.
        /// </summary>
        /// <param name="operation">The operation.</param>
        /// <returns>The Operation Name.</returns>
        public virtual string ItemName(Operation operation)
        {
            if ((operation == Operation.Assign_Hub))
            {
                return "Assign Hub";
            }
            if ((operation == Operation.Delete_transporter))
            {
                return "Delete transporter";
            }
            if ((operation == Operation.Edit__transport_order))
            {
                return "Edit  transport order";
            }
            if ((operation == Operation.Edit_transport_supplier))
            {
                return "Edit transport supplier";
            }
            if ((operation == Operation.Export_bid_winner_list))
            {
                return "Export bid winner list";
            }
            if ((operation == Operation.Export_hub_allocation))
            {
                return "Export hub allocation";
            }
            if ((operation == Operation.Export_transport_order))
            {
                return "Export transport order";
            }
            if ((operation == Operation.Export_transporters_list))
            {
                return "Export transporters list";
            }
            if ((operation == Operation.Generate_TR))
            {
                return "Generate TR";
            }
            if ((operation == Operation.Hub_Allocation))
            {
                return "Hub Allocation";
            }
            if ((operation == Operation.New_transport_order))
            {
                return "New transport order";
            }
            if ((operation == Operation.New_transport_supplier))
            {
                return "New transport supplier";
            }
            if ((operation == Operation.PC_SI_Code_Allocation))
            {
                return "PC/SI Code Allocation";
            }
            if ((operation == Operation.Price_quatation_data_entry))
            {
                return "Price quatation data entry";
            }
            if ((operation == Operation.Print_bid_winners_list))
            {
                return "Print bid winners list";
            }
            if ((operation == Operation.Print_hub_allocation))
            {
                return "Print hub allocation";
            }
            if ((operation == Operation.Print_RFQ))
            {
                return "Print RFQ";
            }
            if ((operation == Operation.Print_transport_order))
            {
                return "Print transport order";
            }
            if ((operation == Operation.Print_transporters_list))
            {
                return "Print transporters list";
            }
            if ((operation == Operation.View_active_contracts))
            {
                return "View active contracts";
            }
            if ((operation == Operation.View_allocated_hubs))
            {
                return "View allocated hubs";
            }
            if ((operation == Operation.View_bid_winner_transporters))
            {
                return "View bid winner transporters";
            }
            if ((operation == Operation.View_contract_history))
            {
                return "View contract history";
            }
            if ((operation == Operation.View_Destinations))
            {
                return "View Destinations";
            }
            if ((operation == Operation.View_Dispatch_Allocation))
            {
                return "View Dispatch Allocation";
            }
            if ((operation == Operation.View_draft_hub_allocation))
            {
                return "View draft hub allocation";
            }
            if ((operation == Operation.View_Transport_Requisition))
            {
                return "View Transport Requisition";
            }
            if ((operation == Operation.View_Transport_Requisition_Detail))
            {
                return "View Transport Requisition Detail";
            }
            if ((operation == Operation.View_transporter_list))
            {
                return "View transporter list";
            }
            throw new System.ArgumentException("Unknown Operation name", "operation");
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(LogisticsCheckAccess.STORE_NAME, LogisticsCheckAccess.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(LogisticsCheckAccess.STORE_NAME, LogisticsCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(LogisticsCheckAccess.STORE_NAME, LogisticsCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(LogisticsCheckAccess.STORE_NAME, LogisticsCheckAccess.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="dbUserName">The DB User Name.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(LogisticsCheckAccess.STORE_NAME, LogisticsCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="itemName">The Item Name.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.mStorage.CheckAccess(LogisticsCheckAccess.STORE_NAME, LogisticsCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, out attributes, contextParameters);
        }

        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), dbUserName, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), customSID, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), dbUserName, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(role), customSID, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), dbUserName, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), customSID, false, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), dbUserName, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(task), customSID, false, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), customSID, true, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), dbUserName, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Gets the Authorization Type [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
        public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            return this.CheckAccess(this.ItemName(operation), customSID, true, out attributes, contextParameters);
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="role">The Role.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The Custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Custom SID ONLY].
        /// </summary>
        /// <param name="task">The Task.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }

        public bool CheckAccess(Operation operation, IAzManSid dbUserName)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }

        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR Windows Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR DB Users ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="dbUserName">The DB UserName.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        /// <summary>
        /// Checks the access [FOR custom SID ONLY].
        /// </summary>
        /// <param name="operation">The Operation.</param>
        /// <param name="customSID">The custom SID.</param>
        /// <param name="attributes">Retrieved attributes.</param>
        /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
        /// <returns>True for Access Granted, False for Access Denied.</returns>
        public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
        {
            NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, out attributes, contextParameters);
            return ((result == AuthorizationType.AllowWithDelegation)
                        || (result == AuthorizationType.Allow));
        }
        #endregion
        #region Enums
        /// <summary>
        /// Roles Enumeration
        /// </summary>
        public enum Role
        {
            /// <summary>
            /// Role LG-Account Verification Expert(issue)
            /// </summary>
            LG_Account_Verification_Expert_issue,
            /// <summary>
            /// Role LG-Addis Storage & Distribution
            /// </summary>
            LG_Addis_Storage___Distribution,
            /// <summary>
            /// Role LG-Agreement & Processor(issue)
            /// </summary>
            LG_Agreement___Processor_issue,
            /// <summary>
            /// Role LG-Allocation Award & Followup
            /// </summary>
            LG_Allocation_Award___Followup,
            /// <summary>
            /// Role LG-Coordinator
            /// </summary>
            LG_Coordinator,
            /// <summary>
            /// Role LG-Coordinator(issue)
            /// </summary>
            LG_Coordinator_issue,
            /// <summary>
            /// Role LG-Data Encoder(issue)
            /// </summary>
            LG_Data_Encoder_issue,
            /// <summary>
            /// Role LG-Evaluation
            /// </summary>
            LG_Evaluation,
            /// <summary>
            /// Role LG-Followup Expert(issue)
            /// </summary>
            LG_Followup_Expert_issue,
            /// <summary>
            /// Role LG-Legal Officer
            /// </summary>
            LG_Legal_Officer,
            /// <summary>
            /// Role LG-Monitoring & Evaluation(utilization)
            /// </summary>
            LG_Monitoring___Evaluation_utilization,
            /// <summary>
            /// Role LG-Performance Evaluator
            /// </summary>
            LG_Performance_Evaluator,
            /// <summary>
            /// Role LG-Pipeline Officer
            /// </summary>
            LG_Pipeline_Officer,
            /// <summary>
            /// Role LG-Report Compilation
            /// </summary>
            LG_Report_Compilation,
            /// <summary>
            /// Role LG-Secretory
            /// </summary>
            LG_Secretory,
            /// <summary>
            /// Role LG-Storage & Distribution Expert(issue)
            /// </summary>
            LG_Storage___Distribution_Expert_issue,
            /// <summary>
            /// Role LG-Store Keeper
            /// </summary>
            LG_Store_Keeper,
            /// <summary>
            /// Role LG-Transport Officer
            /// </summary>
            LG_Transport_Officer,
            /// <summary>
            /// Role LG-Transport Order Issue(issue)
            /// </summary>
            LG_Transport_Order_Issue_issue,
        }
        /// <summary>
        /// Tasks Enumeration
        /// </summary>
        public enum Task
        {
            /// <summary>
            /// Task Approve bid
            /// </summary>
            Approve_bid,
            /// <summary>
            /// Task Bid winner transporters
            /// </summary>
            Bid_winner_transporters,
            /// <summary>
            /// Task Dispatch Allocation
            /// </summary>
            Dispatch_Allocation,
            /// <summary>
            /// Task Logistic Dashboard
            /// </summary>
            Logistic_Dashboard,
            /// <summary>
            /// Task Manage RFQ
            /// </summary>
            Manage_RFQ,
            /// <summary>
            /// Task Manage transport suppliers
            /// </summary>
            Manage_transport_suppliers,
            /// <summary>
            /// Task Resource Allocation
            /// </summary>
            Resource_Allocation,
            /// <summary>
            /// Task Stock
            /// </summary>
            Stock,
            /// <summary>
            /// Task Transport Order
            /// </summary>
            Transport_Order,
            /// <summary>
            /// Task Transport Requisition
            /// </summary>
            Transport_Requisition,
        }
        /// <summary>
        /// Operations Enumeration
        /// </summary>
        public enum Operation
        {
            /// <summary>
            /// Operation Assign Hub
            /// </summary>
            Assign_Hub,
            /// <summary>
            /// Operation Delete transporter
            /// </summary>
            Delete_transporter,
            /// <summary>
            /// Operation Edit  transport order
            /// </summary>
            Edit__transport_order,
            /// <summary>
            /// Operation Edit transport supplier
            /// </summary>
            Edit_transport_supplier,
            /// <summary>
            /// Operation Export bid winner list
            /// </summary>
            Export_bid_winner_list,
            /// <summary>
            /// Operation Export hub allocation
            /// </summary>
            Export_hub_allocation,
            /// <summary>
            /// Operation Export transport order
            /// </summary>
            Export_transport_order,
            /// <summary>
            /// Operation Export transporters list
            /// </summary>
            Export_transporters_list,
            /// <summary>
            /// Operation Generate TR
            /// </summary>
            Generate_TR,
            /// <summary>
            /// Operation Hub Allocation
            /// </summary>
            Hub_Allocation,
            /// <summary>
            /// Operation New transport order
            /// </summary>
            New_transport_order,
            /// <summary>
            /// Operation New transport supplier
            /// </summary>
            New_transport_supplier,
            /// <summary>
            /// Operation PC/SI Code Allocation
            /// </summary>
            PC_SI_Code_Allocation,
            /// <summary>
            /// Operation Price quatation data entry
            /// </summary>
            Price_quatation_data_entry,
            /// <summary>
            /// Operation Print bid winners list
            /// </summary>
            Print_bid_winners_list,
            /// <summary>
            /// Operation Print hub allocation
            /// </summary>
            Print_hub_allocation,
            /// <summary>
            /// Operation Print RFQ
            /// </summary>
            Print_RFQ,
            /// <summary>
            /// Operation Print transport order
            /// </summary>
            Print_transport_order,
            /// <summary>
            /// Operation Print transporters list
            /// </summary>
            Print_transporters_list,
            /// <summary>
            /// Operation View active contracts
            /// </summary>
            View_active_contracts,
            /// <summary>
            /// Operation View allocated hubs
            /// </summary>
            View_allocated_hubs,
            /// <summary>
            /// Operation View bid winner transporters
            /// </summary>
            View_bid_winner_transporters,
            /// <summary>
            /// Operation View contract history
            /// </summary>
            View_contract_history,
            /// <summary>
            /// Operation View Destinations
            /// </summary>
            View_Destinations,
            /// <summary>
            /// Operation View Dispatch Allocation
            /// </summary>
            View_Dispatch_Allocation,
            /// <summary>
            /// Operation View draft hub allocation
            /// </summary>
            View_draft_hub_allocation,
            /// <summary>
            /// Operation View Transport Requisition
            /// </summary>
            View_Transport_Requisition,
            /// <summary>
            /// Operation View Transport Requisition Detail
            /// </summary>
            View_Transport_Requisition_Detail,
            /// <summary>
            /// Operation View transporter list
            /// </summary>
            View_transporter_list,
        }
        #endregion
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.15
//     CLR Version: v4.0.30319
//     <NetSqlAzMan-info>
//        Store: CATS
//        Application: Logistics
//        Last update: 11/12/2013 11:07:48 AM
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
namespace Logistics.Security
{
    using System;

    /// <summary>
    /// NetSqlAzMan ROLE Helper Class for NetSqlAzMan 'Logistics' Application 
    /// </summary>
    public partial class ROLE
    {
        /// <summary>
        /// ROLE 'LG-Account Verification Expert(issue)'
        /// </summary>
        public const string LG_ACCOUNT_VERIFICATION_EXPERT_ISSUE = "LG-Account Verification Expert(issue)";
        /// <summary>
        /// ROLE 'LG-Addis Storage & Distribution'
        /// </summary>
        public const string LG_ADDIS_STORAGE___DISTRIBUTION = "LG-Addis Storage & Distribution";
        /// <summary>
        /// ROLE 'LG-Agreement & Processor(issue)'
        /// </summary>
        public const string LG_AGREEMENT___PROCESSOR_ISSUE = "LG-Agreement & Processor(issue)";
        /// <summary>
        /// ROLE 'LG-Allocation Award & Followup'
        /// </summary>
        public const string LG_ALLOCATION_AWARD___FOLLOWUP = "LG-Allocation Award & Followup";
        /// <summary>
        /// ROLE 'LG-Coordinator'
        /// </summary>
        public const string LG_COORDINATOR = "LG-Coordinator";
        /// <summary>
        /// ROLE 'LG-Coordinator(issue)'
        /// </summary>
        public const string LG_COORDINATOR_ISSUE = "LG-Coordinator(issue)";
        /// <summary>
        /// ROLE 'LG-Data Encoder(issue)'
        /// </summary>
        public const string LG_DATA_ENCODER_ISSUE = "LG-Data Encoder(issue)";
        /// <summary>
        /// ROLE 'LG-Evaluation'
        /// </summary>
        public const string LG_EVALUATION = "LG-Evaluation";
        /// <summary>
        /// ROLE 'LG-Followup Expert(issue)'
        /// </summary>
        public const string LG_FOLLOWUP_EXPERT_ISSUE = "LG-Followup Expert(issue)";
        /// <summary>
        /// ROLE 'LG-Legal Officer'
        /// </summary>
        public const string LG_LEGAL_OFFICER = "LG-Legal Officer";
        /// <summary>
        /// ROLE 'LG-Monitoring & Evaluation(utilization)'
        /// </summary>
        public const string LG_MONITORING___EVALUATION_UTILIZATION = "LG-Monitoring & Evaluation(utilization)";
        /// <summary>
        /// ROLE 'LG-Performance Evaluator'
        /// </summary>
        public const string LG_PERFORMANCE_EVALUATOR = "LG-Performance Evaluator";
        /// <summary>
        /// ROLE 'LG-Pipeline Officer'
        /// </summary>
        public const string LG_PIPELINE_OFFICER = "LG-Pipeline Officer";
        /// <summary>
        /// ROLE 'LG-Report Compilation'
        /// </summary>
        public const string LG_REPORT_COMPILATION = "LG-Report Compilation";
        /// <summary>
        /// ROLE 'LG-Secretory'
        /// </summary>
        public const string LG_SECRETORY = "LG-Secretory";
        /// <summary>
        /// ROLE 'LG-Storage & Distribution Expert(issue)'
        /// </summary>
        public const string LG_STORAGE___DISTRIBUTION_EXPERT_ISSUE = "LG-Storage & Distribution Expert(issue)";
        /// <summary>
        /// ROLE 'LG-Store Keeper'
        /// </summary>
        public const string LG_STORE_KEEPER = "LG-Store Keeper";
        /// <summary>
        /// ROLE 'LG-Transport Officer'
        /// </summary>
        public const string LG_TRANSPORT_OFFICER = "LG-Transport Officer";
        /// <summary>
        /// ROLE 'LG-Transport Order Issue(issue)'
        /// </summary>
        public const string LG_TRANSPORT_ORDER_ISSUE_ISSUE = "LG-Transport Order Issue(issue)";
    }
    /// <summary>
    /// NetSqlAzMan TASK Helper Class for NetSqlAzMan 'Logistics' Application 
    /// </summary>
    public partial class TASK
    {
        /// <summary>
        /// TASK 'Approve bid'
        /// </summary>
        public const string APPROVE_BID = "Approve bid";
        /// <summary>
        /// TASK 'Bid winner transporters'
        /// </summary>
        public const string BID_WINNER_TRANSPORTERS = "Bid winner transporters";
        /// <summary>
        /// TASK 'Dispatch Allocation'
        /// </summary>
        public const string DISPATCH_ALLOCATION = "Dispatch Allocation";
        /// <summary>
        /// TASK 'Logistic Dashboard'
        /// </summary>
        public const string LOGISTIC_DASHBOARD = "Logistic Dashboard";
        /// <summary>
        /// TASK 'Manage RFQ'
        /// </summary>
        public const string MANAGE_RFQ = "Manage RFQ";
        /// <summary>
        /// TASK 'Manage transport suppliers'
        /// </summary>
        public const string MANAGE_TRANSPORT_SUPPLIERS = "Manage transport suppliers";
        /// <summary>
        /// TASK 'Resource Allocation'
        /// </summary>
        public const string RESOURCE_ALLOCATION = "Resource Allocation";
        /// <summary>
        /// TASK 'Stock'
        /// </summary>
        public const string STOCK = "Stock";
        /// <summary>
        /// TASK 'Transport Order'
        /// </summary>
        public const string TRANSPORT_ORDER = "Transport Order";
        /// <summary>
        /// TASK 'Transport Requisition'
        /// </summary>
        public const string TRANSPORT_REQUISITION = "Transport Requisition";
    }

    /// <summary>
    /// NetSqlAzMan OPERATION Helper Class for NetSqlAzMan 'Logistics' Application 
    /// </summary>
    public partial class OPERATION
    {
        /// <summary>
        /// OPERATION 'Assign Hub'
        /// </summary>
        public const string ASSIGN_HUB = "Assign Hub";
        /// <summary>
        /// OPERATION 'Delete transporter'
        /// </summary>
        public const string DELETE_TRANSPORTER = "Delete transporter";
        /// <summary>
        /// OPERATION 'Edit  transport order'
        /// </summary>
        public const string EDIT__TRANSPORT_ORDER = "Edit  transport order";
        /// <summary>
        /// OPERATION 'Edit transport supplier'
        /// </summary>
        public const string EDIT_TRANSPORT_SUPPLIER = "Edit transport supplier";
        /// <summary>
        /// OPERATION 'Export bid winner list'
        /// </summary>
        public const string EXPORT_BID_WINNER_LIST = "Export bid winner list";
        /// <summary>
        /// OPERATION 'Export hub allocation'
        /// </summary>
        public const string EXPORT_HUB_ALLOCATION = "Export hub allocation";
        /// <summary>
        /// OPERATION 'Export transport order'
        /// </summary>
        public const string EXPORT_TRANSPORT_ORDER = "Export transport order";
        /// <summary>
        /// OPERATION 'Export transporters list'
        /// </summary>
        public const string EXPORT_TRANSPORTERS_LIST = "Export transporters list";
        /// <summary>
        /// OPERATION 'Generate TR'
        /// </summary>
        public const string GENERATE_TR = "Generate TR";
        /// <summary>
        /// OPERATION 'Hub Allocation'
        /// </summary>
        public const string HUB_ALLOCATION = "Hub Allocation";
        /// <summary>
        /// OPERATION 'New transport order'
        /// </summary>
        public const string NEW_TRANSPORT_ORDER = "New transport order";
        /// <summary>
        /// OPERATION 'New transport supplier'
        /// </summary>
        public const string NEW_TRANSPORT_SUPPLIER = "New transport supplier";
        /// <summary>
        /// OPERATION 'PC/SI Code Allocation'
        /// </summary>
        public const string PC_SI_CODE_ALLOCATION = "PC/SI Code Allocation";
        /// <summary>
        /// OPERATION 'Price quatation data entry'
        /// </summary>
        public const string PRICE_QUATATION_DATA_ENTRY = "Price quatation data entry";
        /// <summary>
        /// OPERATION 'Print bid winners list'
        /// </summary>
        public const string PRINT_BID_WINNERS_LIST = "Print bid winners list";
        /// <summary>
        /// OPERATION 'Print hub allocation'
        /// </summary>
        public const string PRINT_HUB_ALLOCATION = "Print hub allocation";
        /// <summary>
        /// OPERATION 'Print RFQ'
        /// </summary>
        public const string PRINT_RFQ = "Print RFQ";
        /// <summary>
        /// OPERATION 'Print transport order'
        /// </summary>
        public const string PRINT_TRANSPORT_ORDER = "Print transport order";
        /// <summary>
        /// OPERATION 'Print transporters list'
        /// </summary>
        public const string PRINT_TRANSPORTERS_LIST = "Print transporters list";
        /// <summary>
        /// OPERATION 'View active contracts'
        /// </summary>
        public const string VIEW_ACTIVE_CONTRACTS = "View active contracts";
        /// <summary>
        /// OPERATION 'View allocated hubs'
        /// </summary>
        public const string VIEW_ALLOCATED_HUBS = "View allocated hubs";
        /// <summary>
        /// OPERATION 'View bid winner transporters'
        /// </summary>
        public const string VIEW_BID_WINNER_TRANSPORTERS = "View bid winner transporters";
        /// <summary>
        /// OPERATION 'View contract history'
        /// </summary>
        public const string VIEW_CONTRACT_HISTORY = "View contract history";
        /// <summary>
        /// OPERATION 'View Destinations'
        /// </summary>
        public const string VIEW_DESTINATIONS = "View Destinations";
        /// <summary>
        /// OPERATION 'View Dispatch Allocation'
        /// </summary>
        public const string VIEW_DISPATCH_ALLOCATION = "View Dispatch Allocation";
        /// <summary>
        /// OPERATION 'View draft hub allocation'
        /// </summary>
        public const string VIEW_DRAFT_HUB_ALLOCATION = "View draft hub allocation";
        /// <summary>
        /// OPERATION 'View Transport Requisition'
        /// </summary>
        public const string VIEW_TRANSPORT_REQUISITION = "View Transport Requisition";
        /// <summary>
        /// OPERATION 'View Transport Requisition Detail'
        /// </summary>
        public const string VIEW_TRANSPORT_REQUISITION_DETAIL = "View Transport Requisition Detail";
        /// <summary>
        /// OPERATION 'View transporter list'
        /// </summary>
        public const string VIEW_TRANSPORTER_LIST = "View transporter list";
    }
}
