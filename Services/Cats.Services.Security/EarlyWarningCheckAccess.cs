//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by NetSqlAzMan CodeDom.
//     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
//     NetSqlAzMan Version: 3.6.0.15
//     CLR Version: v4.0.30319
//     <NetSqlAzMan-info>
//        Store: CATS
//        Application: Early_Warning
//        Last update: 10/7/2013 3:45:14 PM
//     </NetSqlAzMan-info>
//  </auto-generated>
// ------------------------------------------------------------------------------
// 
// 
// TODO: Add NetSqlAzMan.dll Assembly reference.
// 
// 

    using System;
    using System.Security.Principal;
    using System.Collections.Generic;
    using System.Text;
    using NetSqlAzMan;
    using NetSqlAzMan.Interfaces;
    using Cats.Services.Security;

    namespace Cats.Services.Security
    {



        /// <summary>
        /// NetSqlAzMan Check Access Helper Class for NetSqlAzMan 'Early Warning' Application 
        /// </summary>
        public partial class EarlyWarningCheckAccess : IEarlyWarningCheckAccess
        {
            #region Constants
            /// <summary>
            /// Store Name
            /// </summary>
            protected internal const string STORE_NAME = "CATS";
            /// <summary>
            /// Application Name
            /// </summary>
            protected internal const string APPLICATION_NAME = "Early Warning";
            #endregion

            #region Fields
            /// <summary>
            /// NetSqlAzMan Storage reference.
            /// </summary>
            protected NetSqlAzMan.Interfaces.IAzManStorage mStorage;
            /// <summary>
            /// User Windows Principal Identity.
            /// </summary>
            protected System.Security.Principal.WindowsIdentity windowsIdentity;

            #endregion

            #region Constructors
            /// <summary>
            /// Initializes a new instance of the <see cref="T:CheckAccessHelper"/> class [Windows Users ONLY].
            /// </summary>
            /// <param name="storageConnectionString">The storage connection string.</param>
            /// <param name="windowsIdentity">The Windows Principal Identity.</param>
            public EarlyWarningCheckAccess(string storageConnectionString, System.Security.Principal.WindowsIdentity windowsIdentity)
            {
                this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
                this.windowsIdentity = windowsIdentity;
            }
            /// <summary>
            /// Initializes a new instance of the <see cref="T:CheckAccessHelper"/> class [DB Users ONLY].
            /// </summary>
            /// <param name="storageConnectionString">The storage connection string.</param>
            public EarlyWarningCheckAccess(string storageConnectionString)
            {
                this.mStorage = new NetSqlAzMan.SqlAzManStorage(storageConnectionString);
            }
            #endregion

            #region Properties
            /// <summary>
            /// Gets the NetSqlAzMan Storage.
            /// </summary>
            public virtual NetSqlAzMan.Interfaces.IAzManStorage Storage
            {
                get
                {
                    return this.mStorage;
                }
            }
            #endregion

            #region Methods
            /// <summary>
            /// Opens the connection
            /// </summary>
            public virtual void OpenConnection()
            {
                this.mStorage.OpenConnection();
            }
            /// <summary>
            /// Closes the connection
            /// </summary>
            public virtual void CloseConnection()
            {
                this.mStorage.CloseConnection();
            }
            /// <summary>
            /// Retrieve Item name from a Role Enum.
            /// </summary>
            /// <param name="role">The role.</param>
            /// <returns>The Role Name.</returns>
            public virtual string ItemName(Role role)
            {
                if ((role == Role.EW_Coordinator))
                {
                    return "EW Coordinator";
                }
                if ((role == Role.EW_Custom_Officer))
                {
                    return "EW-Custom Officer";
                }
                if ((role == Role.EW_Director__EWRD))
                {
                    return "EW-Director (EWRD)";
                }
                if ((role == Role.EW_Experts))
                {
                    return "EW-Experts";
                }
                if ((role == Role.EW_Logistics_Planner))
                {
                    return "EW-Logistics Planner";
                }
                if ((role == Role.EW_Minister__MoA))
                {
                    return "EW-Minister (MoA)";
                }
                if ((role == Role.EW_National_DPPC))
                {
                    return "EW-National DPPC";
                }
                if ((role == Role.EW_Other_Stakeholders))
                {
                    return "EW-Other Stakeholders";
                }
                if ((role == Role.EW_Regional_DPPBs))
                {
                    return "EW-Regional DPPBs";
                }
                if ((role == Role.EW_Resource_Mobilization_Expert))
                {
                    return "EW-Resource Mobilization Expert";
                }
                if ((role == Role.EW_State_Minster__DRMFSS))
                {
                    return "EW-State Minster (DRMFSS)";
                }
                throw new System.ArgumentException("Unknown Role name", "role");
            }
            /// <summary>
            /// Retrieve Item name from a Task Enum.
            /// </summary>
            /// <param name="task">The task.</param>
            /// <returns>The Task Name.</returns>
            public virtual string ItemName(Task task)
            {
                if ((task == Task.Manage_Gift_Certificate))
                {
                    return "Manage Gift Certificate";
                }
                if ((task == Task.Manage_HRD))
                {
                    return "Manage HRD";
                }
                if ((task == Task.Manage_Monthly_Requests))
                {
                    return "Manage Monthly Requests";
                }
                if ((task == Task.Manage_Ration))
                {
                    return "Manage Ration";
                }
                if ((task == Task.Manage_requisition))
                {
                    return "Manage requisition";
                }
                if ((task == Task.Modify_Allocation))
                {
                    return "Modify Allocation";
                }
                if ((task == Task.Needs_assessment))
                {
                    return "Needs assessment";
                }
                throw new System.ArgumentException("Unknown Task name", "task");
            }
            /// <summary>
            /// Retrieve Item name from a Operation Enum.
            /// </summary>
            /// <param name="operation">The operation.</param>
            /// <returns>The Operation Name.</returns>
            public virtual string ItemName(Operation operation)
            {
                if ((operation == Operation.Add_new_commodity_allocation))
                {
                    return "Add new commodity allocation";
                }
                if ((operation == Operation.Add_new_ration))
                {
                    return "Add new ration";
                }
                if ((operation == Operation.Add_new_request))
                {
                    return "Add new request";
                }
                if ((operation == Operation.Approve_Gift_Certeficate))
                {
                    return "Approve Gift Certeficate";
                }
                if ((operation == Operation.Approve_HRD))
                {
                    return "Approve HRD";
                }
                if ((operation == Operation.Approve_Need_Assessment))
                {
                    return "Approve Need Assessment";
                }
                if ((operation == Operation.Approve_Request))
                {
                    return "Approve Request";
                }
                if ((operation == Operation.Approve_Requisition))
                {
                    return "Approve Requisition";
                }
                if ((operation == Operation.Commodity_Allocation))
                {
                    return "Commodity Allocation";
                }
                if ((operation == Operation.Compare_HRD))
                {
                    return "Compare HRD";
                }
                if ((operation == Operation.Create_new_needs_assessment))
                {
                    return "Create new needs assessment";
                }
                if ((operation == Operation.Delete_Gift_Certificate))
                {
                    return "Delete Gift Certificate";
                }
                if ((operation == Operation.Delete_needs_assessment))
                {
                    return "Delete needs assessment";
                }
                if ((operation == Operation.Edit_Gift_Certificate))
                {
                    return "Edit Gift Certificate";
                }
                if ((operation == Operation.Edit_needs_assessment))
                {
                    return "Edit needs assessment";
                }
                if ((operation == Operation.Edit_ration))
                {
                    return "Edit ration";
                }
                if ((operation == Operation.Edit_request))
                {
                    return "Edit request";
                }
                if ((operation == Operation.Edit_requisition))
                {
                    return "Edit requisition";
                }
                if ((operation == Operation.Export_Gift_Certificate))
                {
                    return "Export Gift Certificate";
                }
                if ((operation == Operation.Export_HRD))
                {
                    return "Export HRD";
                }
                if ((operation == Operation.Export_needs_assessment))
                {
                    return "Export needs assessment";
                }
                if ((operation == Operation.Export_ration))
                {
                    return "Export ration";
                }
                if ((operation == Operation.Export_requests))
                {
                    return "Export requests";
                }
                if ((operation == Operation.Export_requisitions))
                {
                    return "Export requisitions";
                }
                if ((operation == Operation.Followup_requisitions))
                {
                    return "Followup requisitions";
                }
                if ((operation == Operation.Generate_Gift_Certificate_Template))
                {
                    return "Generate Gift Certificate Template";
                }
                if ((operation == Operation.Gift_Add_new_item))
                {
                    return "Gift-Add new item";
                }
                if ((operation == Operation.HRD_Summary))
                {
                    return "HRD Summary";
                }
                if ((operation == Operation.Modify_HRD))
                {
                    return "Modify HRD";
                }
                if ((operation == Operation.New_Gift_Certificate))
                {
                    return "New Gift Certificate";
                }
                if ((operation == Operation.New_HRD))
                {
                    return "New HRD";
                }
                if ((operation == Operation.Number_of_Beneficiaries))
                {
                    return "Number of Beneficiaries";
                }
                if ((operation == Operation.Print_Gift_Certificate))
                {
                    return "Print Gift Certificate";
                }
                if ((operation == Operation.Print_HRD))
                {
                    return "Print HRD";
                }
                if ((operation == Operation.Print_needs_assessment))
                {
                    return "Print needs assessment";
                }
                if ((operation == Operation.Print_ration))
                {
                    return "Print ration";
                }
                if ((operation == Operation.Print_request))
                {
                    return "Print request";
                }
                if ((operation == Operation.Print_requisitions))
                {
                    return "Print requisitions";
                }
                if ((operation == Operation.Ration__Add_new_item))
                {
                    return "Ration- Add new item";
                }
                if ((operation == Operation.Request_Allocation))
                {
                    return "Request Allocation";
                }
                if ((operation == Operation.Requisition_exceptions))
                {
                    return "Requisition exceptions";
                }
                if ((operation == Operation.Set_Default_Ration))
                {
                    return "Set Default Ration";
                }
                if ((operation == Operation.View_Approved_Gift_Certificate))
                {
                    return "View Approved Gift Certificate";
                }
                if ((operation == Operation.View_Approved_HRD))
                {
                    return "View Approved HRD";
                }
                if ((operation == Operation.View_approved_needs_assesment))
                {
                    return "View approved needs assesment";
                }
                if ((operation == Operation.View_Approved_Request))
                {
                    return "View Approved Request";
                }
                if ((operation == Operation.View_approved_requisitions))
                {
                    return "View approved requisitions";
                }
                if ((operation == Operation.View_Beneficiary_no_and_duration_of_assisstance))
                {
                    return "View Beneficiary no and duration of assisstance";
                }
                if ((operation == Operation.View_Current_HRD))
                {
                    return "View Current HRD";
                }
                if ((operation == Operation.View_Draft_Needs_Assessment))
                {
                    return "View Draft Needs Assessment";
                }
                if ((operation == Operation.View_Draft_requests))
                {
                    return "View Draft requests";
                }
                if ((operation == Operation.View_draft_requisition))
                {
                    return "View draft requisition";
                }
                if ((operation == Operation.View_Gift_Certificate_list))
                {
                    return "View Gift Certificate list";
                }
                if ((operation == Operation.View_HRD_Detail))
                {
                    return "View HRD Detail";
                }
                if ((operation == Operation.View_HRD_list))
                {
                    return "View HRD list";
                }
                if ((operation == Operation.View_Hub_Assigned_Requisition))
                {
                    return "View Hub Assigned Requisition";
                }
                if ((operation == Operation.View_Need_Assessment_Detail))
                {
                    return "View Need Assessment Detail";
                }
                if ((operation == Operation.View_PC_SI_Assigned_Requisition))
                {
                    return "View PC/SI Assigned Requisition";
                }
                if ((operation == Operation.View_Ration_List))
                {
                    return "View Ration List";
                }
                if ((operation == Operation.View_request))
                {
                    return "View request";
                }
                if ((operation == Operation.View_Requisition))
                {
                    return "View Requisition";
                }
                if ((operation == Operation.View_submitted_requests))
                {
                    return "View submitted requests";
                }
                throw new System.ArgumentException("Unknown Operation name", "operation");
            }
            /// <summary>
            /// Checks the access [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="itemName">The Item Name.</param>
            /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.mStorage.CheckAccess(EarlyWarningCheckAccess.STORE_NAME, EarlyWarningCheckAccess.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, contextParameters);
            }
            /// <summary>
            /// Checks the access [FOR DB Users ONLY].
            /// </summary>
            /// <param name="itemName">The Item Name.</param>
            /// <param name="dbUserName">The DB User Name.</param>
            /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.mStorage.CheckAccess(EarlyWarningCheckAccess.STORE_NAME, EarlyWarningCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, contextParameters);
            }
            /// <summary>
            /// Checks the access [FOR custom SID ONLY].
            /// </summary>
            /// <param name="itemName">The Item Name.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.mStorage.CheckAccess(EarlyWarningCheckAccess.STORE_NAME, EarlyWarningCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, contextParameters);
            }
            /// <summary>
            /// Checks the access [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="itemName">The Item Name.</param>
            /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.mStorage.CheckAccess(EarlyWarningCheckAccess.STORE_NAME, EarlyWarningCheckAccess.APPLICATION_NAME, itemName, this.windowsIdentity, DateTime.Now, operationsOnly, out attributes, contextParameters);
            }
            /// <summary>
            /// Checks the access [FOR DB Users ONLY].
            /// </summary>
            /// <param name="itemName">The Item Name.</param>
            /// <param name="dbUserName">The DB User Name.</param>
            /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, string dbUserName, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.mStorage.CheckAccess(EarlyWarningCheckAccess.STORE_NAME, EarlyWarningCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(dbUserName), DateTime.Now, operationsOnly, out attributes, contextParameters);
            }
            /// <summary>
            /// Checks the access [FOR Custom SID ONLY].
            /// </summary>
            /// <param name="itemName">The Item Name.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="operationsOnly">if set to <c>true</c> checks the access for operations only.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            protected virtual NetSqlAzMan.Interfaces.AuthorizationType CheckAccess(string itemName, NetSqlAzMan.Interfaces.IAzManSid customSID, bool operationsOnly, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.mStorage.CheckAccess(EarlyWarningCheckAccess.STORE_NAME, EarlyWarningCheckAccess.APPLICATION_NAME, itemName, this.mStorage.GetDBUser(customSID), DateTime.Now, operationsOnly, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(role), false, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR DB Users ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(role), dbUserName, false, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Custom SID ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(role), customSID, false, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(role), false, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR DB Users ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(role), dbUserName, false, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Custom SID ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(role), customSID, false, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(task), false, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR DB Users ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(task), dbUserName, false, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Custom SID ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="customSID">The Custom SID.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(task), customSID, false, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(task), false, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR DB Users ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(task), dbUserName, false, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR custom SID ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="customSID">The Custom SID.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(task), customSID, false, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(operation), true, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR DB Users ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(operation), dbUserName, true, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Custom SID ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="customSID">The Custom SID.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(operation), customSID, true, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(operation), true, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR DB Users ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(operation), dbUserName, true, out attributes, contextParameters);
            }
            /// <summary>
            /// Gets the Authorization Type [FOR custom SID ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="customSID">The Custom SID.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>The Authorization Type [AllowWithDelegation, Allow, Deny, Neutral].</returns>
            public virtual NetSqlAzMan.Interfaces.AuthorizationType GetAuthorizationType(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                return this.CheckAccess(this.ItemName(operation), customSID, true, out attributes, contextParameters);
            }
            /// <summary>
            /// Checks the access [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Role role, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR DB Users ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Role role, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR custom SID ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Role role, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, out attributes, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR DB Users ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Role role, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, dbUserName, out attributes, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR Custom SID ONLY].
            /// </summary>
            /// <param name="role">The Role.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Role role, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(role, customSID, out attributes, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Task task, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR DB Users ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Task task, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR Custom SID ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="customSID">The Custom SID.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Task task, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, out attributes, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR DB Users ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Task task, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, dbUserName, out attributes, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR Custom SID ONLY].
            /// </summary>
            /// <param name="task">The Task.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Task task, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(task, customSID, out attributes, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Operation operation, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, contextParameters);
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR DB Users ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Operation operation, string dbUserName, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, contextParameters);
                return true;
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR custom SID ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, contextParameters);
                //return true;
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR Windows Users ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Operation operation, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, out attributes, contextParameters);
                return true;
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR DB Users ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="dbUserName">The DB UserName.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Operation operation, string dbUserName, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, dbUserName, out attributes, contextParameters);
                return true;
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            /// <summary>
            /// Checks the access [FOR custom SID ONLY].
            /// </summary>
            /// <param name="operation">The Operation.</param>
            /// <param name="customSID">The custom SID.</param>
            /// <param name="attributes">Retrieved attributes.</param>
            /// <param name="contextParameters">Context Parameters for Biz Rules.</param>
            /// <returns>True for Access Granted, False for Access Denied.</returns>
            public virtual bool CheckAccess(Operation operation, NetSqlAzMan.Interfaces.IAzManSid customSID, out System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>> attributes, params KeyValuePair<string, object>[] contextParameters)
            {
                NetSqlAzMan.Interfaces.AuthorizationType result = this.GetAuthorizationType(operation, customSID, out attributes, contextParameters);

                return true;
                return ((result == AuthorizationType.AllowWithDelegation)
                            || (result == AuthorizationType.Allow));
            }
            #endregion

            #region Enums
            /// <summary>
            /// Roles Enumeration
            /// </summary>
            public enum Role
            {
                /// <summary>
                /// Role EW Coordinator
                /// </summary>
                EW_Coordinator,
                /// <summary>
                /// Role EW-Custom Officer
                /// </summary>
                EW_Custom_Officer,
                /// <summary>
                /// Role EW-Director (EWRD)
                /// </summary>
                EW_Director__EWRD,
                /// <summary>
                /// Role EW-Experts
                /// </summary>
                EW_Experts,
                /// <summary>
                /// Role EW-Logistics Planner
                /// </summary>
                EW_Logistics_Planner,
                /// <summary>
                /// Role EW-Minister (MoA)
                /// </summary>
                EW_Minister__MoA,
                /// <summary>
                /// Role EW-National DPPC
                /// </summary>
                EW_National_DPPC,
                /// <summary>
                /// Role EW-Other Stakeholders
                /// </summary>
                EW_Other_Stakeholders,
                /// <summary>
                /// Role EW-Regional DPPBs
                /// </summary>
                EW_Regional_DPPBs,
                /// <summary>
                /// Role EW-Resource Mobilization Expert
                /// </summary>
                EW_Resource_Mobilization_Expert,
                /// <summary>
                /// Role EW-State Minster (DRMFSS)
                /// </summary>
                EW_State_Minster__DRMFSS,
            }
            /// <summary>
            /// Tasks Enumeration
            /// </summary>
            public enum Task
            {
                /// <summary>
                /// Task Manage Gift Certificate
                /// </summary>
                Manage_Gift_Certificate,
                /// <summary>
                /// Task Manage HRD
                /// </summary>
                Manage_HRD,
                /// <summary>
                /// Task Manage Monthly Requests
                /// </summary>
                Manage_Monthly_Requests,
                /// <summary>
                /// Task Manage Ration
                /// </summary>
                Manage_Ration,
                /// <summary>
                /// Task Manage requisition
                /// </summary>
                Manage_requisition,
                /// <summary>
                /// Task Modify Allocation
                /// </summary>
                Modify_Allocation,
                /// <summary>
                /// Task Needs assessment
                /// </summary>
                Needs_assessment,
            }
            /// <summary>
            /// Operations Enumeration
            /// </summary>
            public enum Operation
            {
                /// <summary>
                /// Operation Add new commodity allocation
                /// </summary>
                Add_new_commodity_allocation,
                /// <summary>
                /// Operation Add new ration
                /// </summary>
                Add_new_ration,
                /// <summary>
                /// Operation Add new request
                /// </summary>
                Add_new_request,
                /// <summary>
                /// Operation Approve Gift Certeficate
                /// </summary>
                Approve_Gift_Certeficate,
                /// <summary>
                /// Operation Approve HRD
                /// </summary>
                Approve_HRD,
                /// <summary>
                /// Operation Approve Need Assessment
                /// </summary>
                Approve_Need_Assessment,
                /// <summary>
                /// Operation Approve Request
                /// </summary>
                Approve_Request,
                /// <summary>
                /// Operation Approve Requisition
                /// </summary>
                Approve_Requisition,
                /// <summary>
                /// Operation Commodity Allocation
                /// </summary>
                Commodity_Allocation,
                /// <summary>
                /// Operation Compare HRD
                /// </summary>
                Compare_HRD,
                /// <summary>
                /// Operation Create new needs assessment
                /// </summary>
                Create_new_needs_assessment,
                /// <summary>
                /// Operation Delete Gift Certificate
                /// </summary>
                Delete_Gift_Certificate,
                /// <summary>
                /// Operation Delete needs assessment
                /// </summary>
                Delete_needs_assessment,
                /// <summary>
                /// Operation Edit Gift Certificate
                /// </summary>
                Edit_Gift_Certificate,
                /// <summary>
                /// Operation Edit needs assessment
                /// </summary>
                Edit_needs_assessment,
                /// <summary>
                /// Operation Edit ration
                /// </summary>
                Edit_ration,
                /// <summary>
                /// Operation Edit request
                /// </summary>
                Edit_request,
                /// <summary>
                /// Operation Edit requisition
                /// </summary>
                Edit_requisition,
                /// <summary>
                /// Operation Export Gift Certificate
                /// </summary>
                Export_Gift_Certificate,
                /// <summary>
                /// Operation Export HRD
                /// </summary>
                Export_HRD,
                /// <summary>
                /// Operation Export needs assessment
                /// </summary>
                Export_needs_assessment,
                /// <summary>
                /// Operation Export ration
                /// </summary>
                Export_ration,
                /// <summary>
                /// Operation Export requests
                /// </summary>
                Export_requests,
                /// <summary>
                /// Operation Export requisitions
                /// </summary>
                Export_requisitions,
                /// <summary>
                /// Operation Followup requisitions
                /// </summary>
                Followup_requisitions,
                /// <summary>
                /// Operation Generate Gift Certificate Template
                /// </summary>
                Generate_Gift_Certificate_Template,
                /// <summary>
                /// Operation Gift-Add new item
                /// </summary>
                Gift_Add_new_item,
                /// <summary>
                /// Operation HRD Summary
                /// </summary>
                HRD_Summary,
                /// <summary>
                /// Operation Modify HRD
                /// </summary>
                Modify_HRD,
                /// <summary>
                /// Operation New Gift Certificate
                /// </summary>
                New_Gift_Certificate,
                /// <summary>
                /// Operation New HRD
                /// </summary>
                New_HRD,
                /// <summary>
                /// Operation Number of Beneficiaries
                /// </summary>
                Number_of_Beneficiaries,
                /// <summary>
                /// Operation Print Gift Certificate
                /// </summary>
                Print_Gift_Certificate,
                /// <summary>
                /// Operation Print HRD
                /// </summary>
                Print_HRD,
                /// <summary>
                /// Operation Print needs assessment
                /// </summary>
                Print_needs_assessment,
                /// <summary>
                /// Operation Print ration
                /// </summary>
                Print_ration,
                /// <summary>
                /// Operation Print request
                /// </summary>
                Print_request,
                /// <summary>
                /// Operation Print requisitions
                /// </summary>
                Print_requisitions,
                /// <summary>
                /// Operation Ration- Add new item
                /// </summary>
                Ration__Add_new_item,
                /// <summary>
                /// Operation Request Allocation
                /// </summary>
                Request_Allocation,
                /// <summary>
                /// Operation Requisition exceptions
                /// </summary>
                Requisition_exceptions,
                /// <summary>
                /// Operation Set Default Ration
                /// </summary>
                Set_Default_Ration,
                /// <summary>
                /// Operation View Approved Gift Certificate
                /// </summary>
                View_Approved_Gift_Certificate,
                /// <summary>
                /// Operation View Approved HRD
                /// </summary>
                View_Approved_HRD,
                /// <summary>
                /// Operation View approved needs assesment
                /// </summary>
                View_approved_needs_assesment,
                /// <summary>
                /// Operation View Approved Request
                /// </summary>
                View_Approved_Request,
                /// <summary>
                /// Operation View approved requisitions
                /// </summary>
                View_approved_requisitions,
                /// <summary>
                /// Operation View Beneficiary no and duration of assisstance
                /// </summary>
                View_Beneficiary_no_and_duration_of_assisstance,
                /// <summary>
                /// Operation View Current HRD
                /// </summary>
                View_Current_HRD,
                /// <summary>
                /// Operation View Draft Needs Assessment
                /// </summary>
                View_Draft_Needs_Assessment,
                /// <summary>
                /// Operation View Draft requests
                /// </summary>
                View_Draft_requests,
                /// <summary>
                /// Operation View draft requisition
                /// </summary>
                View_draft_requisition,
                /// <summary>
                /// Operation View Gift Certificate list
                /// </summary>
                View_Gift_Certificate_list,
                /// <summary>
                /// Operation View HRD Detail
                /// </summary>
                View_HRD_Detail,
                /// <summary>
                /// Operation View HRD list
                /// </summary>
                View_HRD_list,
                /// <summary>
                /// Operation View Hub Assigned Requisition
                /// </summary>
                View_Hub_Assigned_Requisition,
                /// <summary>
                /// Operation View Need Assessment Detail
                /// </summary>
                View_Need_Assessment_Detail,
                /// <summary>
                /// Operation View PC/SI Assigned Requisition
                /// </summary>
                View_PC_SI_Assigned_Requisition,
                /// <summary>
                /// Operation View Ration List
                /// </summary>
                View_Ration_List,
                /// <summary>
                /// Operation View request
                /// </summary>
                View_request,
                /// <summary>
                /// Operation View Requisition
                /// </summary>
                View_Requisition,
                /// <summary>
                /// Operation View submitted requests
                /// </summary>
                View_submitted_requests,
            }

            #endregion
        }

        //------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated by a tool.
        //     Runtime Version:4.0.30319.18052
        //
        //     Changes to this file may cause incorrect behavior and will be lost if
        //     the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------

        // ------------------------------------------------------------------------------
        //  <auto-generated>
        //     This code was generated by NetSqlAzMan CodeDom.
        //     NetSqlAzMan - Andrea Ferendeles - http://netsqlazman.codeplex.com
        //     NetSqlAzMan Version: 3.6.0.15
        //     CLR Version: v4.0.30319
        //     <NetSqlAzMan-info>
        //        Store: CATS
        //        Application: Early_Warning
        //        Last update: 11/12/2013 3:29:11 PM
        //     </NetSqlAzMan-info>
        //  </auto-generated>
        // ------------------------------------------------------------------------------
        // 
        /// <summary>
        /// NetSqlAzMan ROLE Helper Class for NetSqlAzMan 'Early Warning' Application 
        /// </summary>
        public partial class ROLE
        {
            /// <summary>
            /// ROLE 'EW Coordinator'
            /// </summary>
            public const string EW_COORDINATOR = "EW Coordinator";
            /// <summary>
            /// ROLE 'EW-Custom Officer'
            /// </summary>
            public const string EW_CUSTOM_OFFICER = "EW-Custom Officer";
            /// <summary>
            /// ROLE 'EW-Director (EWRD)'
            /// </summary>
            public const string EW_DIRECTOR__EWRD = "EW-Director (EWRD)";
            /// <summary>
            /// ROLE 'EW-Experts'
            /// </summary>
            public const string EW_EXPERTS = "EW-Experts";
            /// <summary>
            /// ROLE 'EW-Logistics Planner'
            /// </summary>
            public const string EW_LOGISTICS_PLANNER = "EW-Logistics Planner";
            /// <summary>
            /// ROLE 'EW-Minister (MoA)'
            /// </summary>
            public const string EW_MINISTER__MOA = "EW-Minister (MoA)";
            /// <summary>
            /// ROLE 'EW-National DPPC'
            /// </summary>
            public const string EW_NATIONAL_DPPC = "EW-National DPPC";
            /// <summary>
            /// ROLE 'EW-Other Stakeholders'
            /// </summary>
            public const string EW_OTHER_STAKEHOLDERS = "EW-Other Stakeholders";
            /// <summary>
            /// ROLE 'EW-Regional DPPBs'
            /// </summary>
            public const string EW_REGIONAL_DPPBS = "EW-Regional DPPBs";
            /// <summary>
            /// ROLE 'EW-Resource Mobilization Expert'
            /// </summary>
            public const string EW_RESOURCE_MOBILIZATION_EXPERT = "EW-Resource Mobilization Expert";
            /// <summary>
            /// ROLE 'EW-State Minster (DRMFSS)'
            /// </summary>
            public const string EW_STATE_MINSTER__DRMFSS = "EW-State Minster (DRMFSS)";
        }
        /// <summary>
        /// NetSqlAzMan TASK Helper Class for NetSqlAzMan 'Early Warning' Application 
        /// </summary>
        public partial class TASK
        {
            /// <summary>
            /// TASK 'Manage Gift Certificate'
            /// </summary>
            public const string MANAGE_GIFT_CERTIFICATE = "Manage Gift Certificate";
            /// <summary>
            /// TASK 'Manage HRD'
            /// </summary>
            public const string MANAGE_HRD = "Manage HRD";
            /// <summary>
            /// TASK 'Manage Monthly Requests'
            /// </summary>
            public const string MANAGE_MONTHLY_REQUESTS = "Manage Monthly Requests";
            /// <summary>
            /// TASK 'Manage Ration'
            /// </summary>
            public const string MANAGE_RATION = "Manage Ration";
            /// <summary>
            /// TASK 'Manage requisition'
            /// </summary>
            public const string MANAGE_REQUISITION = "Manage requisition";
            /// <summary>
            /// TASK 'Modify Allocation'
            /// </summary>
            public const string MODIFY_ALLOCATION = "Modify Allocation";
            /// <summary>
            /// TASK 'Needs assessment'
            /// </summary>
            public const string NEEDS_ASSESSMENT = "Needs assessment";
        }
        public partial class OPERATION
        {
            /// <summary>
            /// OPERATION 'Add new commodity allocation'
            /// </summary>
            public const string ADD_NEW_COMMODITY_ALLOCATION = "Add new commodity allocation";
            /// <summary>
            /// OPERATION 'Add new ration'
            /// </summary>
            public const string ADD_NEW_RATION = "Add new ration";
            /// <summary>
            /// OPERATION 'Add new request'
            /// </summary>
            public const string ADD_NEW_REQUEST = "Add new request";
            /// <summary>
            /// OPERATION 'Approve Gift Certeficate'
            /// </summary>
            public const string APPROVE_GIFT_CERTEFICATE = "Approve Gift Certeficate";
            /// <summary>
            /// OPERATION 'Approve HRD'
            /// </summary>
            public const string APPROVE_HRD = "Approve HRD";
            /// <summary>
            /// OPERATION 'Approve Need Assessment'
            /// </summary>
            public const string APPROVE_NEED_ASSESSMENT = "Approve Need Assessment";
            /// <summary>
            /// OPERATION 'Approve Request'
            /// </summary>
            public const string APPROVE_REQUEST = "Approve Request";
            /// <summary>
            /// OPERATION 'Approve Requisition'
            /// </summary>
            public const string APPROVE_REQUISITION = "Approve Requisition";
            /// <summary>
            /// OPERATION 'Commodity Allocation'
            /// </summary>
            public const string COMMODITY_ALLOCATION = "Commodity Allocation";
            /// <summary>
            /// OPERATION 'Compare HRD'
            /// </summary>
            public const string COMPARE_HRD = "Compare HRD";
            /// <summary>
            /// OPERATION 'Create new needs assessment'
            /// </summary>
            public const string CREATE_NEW_NEEDS_ASSESSMENT = "Create new needs assessment";
            /// <summary>
            /// OPERATION 'Delete Gift Certificate'
            /// </summary>
            public const string DELETE_GIFT_CERTIFICATE = "Delete Gift Certificate";
            /// <summary>
            /// OPERATION 'Delete needs assessment'
            /// </summary>
            public const string DELETE_NEEDS_ASSESSMENT = "Delete needs assessment";
            /// <summary>
            /// OPERATION 'Edit Gift Certificate'
            /// </summary>
            public const string EDIT_GIFT_CERTIFICATE = "Edit Gift Certificate";
            /// <summary>
            /// OPERATION 'Edit needs assessment'
            /// </summary>
            public const string EDIT_NEEDS_ASSESSMENT = "Edit needs assessment";
            /// <summary>
            /// OPERATION 'Edit ration'
            /// </summary>
            public const string EDIT_RATION = "Edit ration";
            /// <summary>
            /// OPERATION 'Edit request'
            /// </summary>
            public const string EDIT_REQUEST = "Edit request";
            /// <summary>
            /// OPERATION 'Edit requisition'
            /// </summary>
            public const string EDIT_REQUISITION = "Edit requisition";
            /// <summary>
            /// OPERATION 'Export Gift Certificate'
            /// </summary>
            public const string EXPORT_GIFT_CERTIFICATE = "Export Gift Certificate";
            /// <summary>
            /// OPERATION 'Export HRD'
            /// </summary>
            public const string EXPORT_HRD = "Export HRD";
            /// <summary>
            /// OPERATION 'Export needs assessment'
            /// </summary>
            public const string EXPORT_NEEDS_ASSESSMENT = "Export needs assessment";
            /// <summary>
            /// OPERATION 'Export ration'
            /// </summary>
            public const string EXPORT_RATION = "Export ration";
            /// <summary>
            /// OPERATION 'Export requests'
            /// </summary>
            public const string EXPORT_REQUESTS = "Export requests";
            /// <summary>
            /// OPERATION 'Export requisitions'
            /// </summary>
            public const string EXPORT_REQUISITIONS = "Export requisitions";
            /// <summary>
            /// OPERATION 'Followup requisitions'
            /// </summary>
            public const string FOLLOWUP_REQUISITIONS = "Followup requisitions";
            /// <summary>
            /// OPERATION 'Generate Gift Certificate Template'
            /// </summary>
            public const string GENERATE_GIFT_CERTIFICATE_TEMPLATE = "Generate Gift Certificate Template";
            /// <summary>
            /// OPERATION 'Gift-Add new item'
            /// </summary>
            public const string GIFT_ADD_NEW_ITEM = "Gift-Add new item";
            /// <summary>
            /// OPERATION 'HRD Summary'
            /// </summary>
            public const string HRD_SUMMARY = "HRD Summary";
            /// <summary>
            /// OPERATION 'Modify HRD'
            /// </summary>
            public const string MODIFY_HRD = "Modify HRD";
            /// <summary>
            /// OPERATION 'New Gift Certificate'
            /// </summary>
            public const string NEW_GIFT_CERTIFICATE = "New Gift Certificate";
            /// <summary>
            /// OPERATION 'New HRD'
            /// </summary>
            public const string NEW_HRD = "New HRD";
            /// <summary>
            /// OPERATION 'Number of Beneficiaries'
            /// </summary>
            public const string NUMBER_OF_BENEFICIARIES = "Number of Beneficiaries";
            /// <summary>
            /// OPERATION 'Print Gift Certificate'
            /// </summary>
            public const string PRINT_GIFT_CERTIFICATE = "Print Gift Certificate";
            /// <summary>
            /// OPERATION 'Print HRD'
            /// </summary>
            public const string PRINT_HRD = "Print HRD";
            /// <summary>
            /// OPERATION 'Print needs assessment'
            /// </summary>
            public const string PRINT_NEEDS_ASSESSMENT = "Print needs assessment";
            /// <summary>
            /// OPERATION 'Print ration'
            /// </summary>
            public const string PRINT_RATION = "Print ration";
            /// <summary>
            /// OPERATION 'Print request'
            /// </summary>
            public const string PRINT_REQUEST = "Print request";
            /// <summary>
            /// OPERATION 'Print requisitions'
            /// </summary>
            public const string PRINT_REQUISITIONS = "Print requisitions";
            /// <summary>
            /// OPERATION 'Ration- Add new item'
            /// </summary>
            public const string RATION__ADD_NEW_ITEM = "Ration- Add new item";
            /// <summary>
            /// OPERATION 'Request Allocation'
            /// </summary>
            public const string REQUEST_ALLOCATION = "Request Allocation";
            /// <summary>
            /// OPERATION 'Requisition exceptions'
            /// </summary>
            public const string REQUISITION_EXCEPTIONS = "Requisition exceptions";
            /// <summary>
            /// OPERATION 'Set Default Ration'
            /// </summary>
            public const string SET_DEFAULT_RATION = "Set Default Ration";
            /// <summary>
            /// OPERATION 'View Approved Gift Certificate'
            /// </summary>
            public const string VIEW_APPROVED_GIFT_CERTIFICATE = "View Approved Gift Certificate";
            /// <summary>
            /// OPERATION 'View Approved HRD'
            /// </summary>
            public const string VIEW_APPROVED_HRD = "View Approved HRD";
            /// <summary>
            /// OPERATION 'View approved needs assesment'
            /// </summary>
            public const string VIEW_APPROVED_NEEDS_ASSESMENT = "View approved needs assesment";
            /// <summary>
            /// OPERATION 'View Approved Request'
            /// </summary>
            public const string VIEW_APPROVED_REQUEST = "View Approved Request";
            /// <summary>
            /// OPERATION 'View approved requisitions'
            /// </summary>
            public const string VIEW_APPROVED_REQUISITIONS = "View approved requisitions";
            /// <summary>
            /// OPERATION 'View Beneficiary no and duration of assisstance'
            /// </summary>
            public const string VIEW_BENEFICIARY_NO_AND_DURATION_OF_ASSISSTANCE = "View Beneficiary no and duration of assisstance";
            /// <summary>
            /// OPERATION 'View Current HRD'
            /// </summary>
            public const string VIEW_CURRENT_HRD = "View Current HRD";
            /// <summary>
            /// OPERATION 'View Draft Needs Assessment'
            /// </summary>
            public const string VIEW_DRAFT_NEEDS_ASSESSMENT = "View Draft Needs Assessment";
            /// <summary>
            /// OPERATION 'View Draft requests'
            /// </summary>
            public const string VIEW_DRAFT_REQUESTS = "View Draft requests";
            /// <summary>
            /// OPERATION 'View draft requisition'
            /// </summary>
            public const string VIEW_DRAFT_REQUISITION = "View draft requisition";
            /// <summary>
            /// OPERATION 'View Gift Certificate list'
            /// </summary>
            public const string VIEW_GIFT_CERTIFICATE_LIST = "View Gift Certificate list";
            /// <summary>
            /// OPERATION 'View HRD Detail'
            /// </summary>
            public const string VIEW_HRD_DETAIL = "View HRD Detail";
            /// <summary>
            /// OPERATION 'View HRD list'
            /// </summary>
            public const string VIEW_HRD_LIST = "View HRD list";
            /// <summary>
            /// OPERATION 'View Hub Assigned Requisition'
            /// </summary>
            public const string VIEW_HUB_ASSIGNED_REQUISITION = "View Hub Assigned Requisition";
            /// <summary>
            /// OPERATION 'View Need Assessment Detail'
            /// </summary>
            public const string VIEW_NEED_ASSESSMENT_DETAIL = "View Need Assessment Detail";
            /// <summary>
            /// OPERATION 'View PC/SI Assigned Requisition'
            /// </summary>
            public const string VIEW_PC_SI_ASSIGNED_REQUISITION = "View PC/SI Assigned Requisition";
            /// <summary>
            /// OPERATION 'View Ration List'
            /// </summary>
            public const string VIEW_RATION_LIST = "View Ration List";
            /// <summary>
            /// OPERATION 'View request'
            /// </summary>
            public const string VIEW_REQUEST = "View request";
            /// <summary>
            /// OPERATION 'View Requisition'
            /// </summary>
            public const string VIEW_REQUISITION = "View Requisition";
            /// <summary>
            /// OPERATION 'View submitted requests'
            /// </summary>
            public const string VIEW_SUBMITTED_REQUESTS = "View submitted requests";
        }
    }

   
