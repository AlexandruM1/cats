@using Cats.Helpers
@using Kendo.Mvc.UI
@model  List<Cats.Models.ViewModels.Bid.BidViewModel>

@{
    ViewBag.Title = "Create Bid";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}
<div>
    <h4>Current Bid</h4>
</div>
@section Toolbar
{
    <a data-buttontype="btn_new_record"  class="btn toolbar-btn " href="@Url.Action("Create", "Bid")"></a>
}
@section LeftBar
{
    @Html.Partial("_BidLeftBar")
}

@(Html.Kendo().Grid<Cats.Models.ViewModels.Bid.BidViewModel>()
    .Name("Bid")
    .Columns(columns =>
        {
            columns.Bound(p => p.BidNumber).Template(
                
                @<text>
<a href="@Url.Action("Edit", "Bid", new { Area = "Procurement", id = item.BidID })">@Html.DisplayFor(modelItem => item.BidNumber)</a>
</text>);
            columns.Bound(p => p.StartDatePref).HeaderHtmlAttributes(new { @class = "cats-date-pref-grid" });
            columns.Bound(p => p.EndDatePref).HeaderHtmlAttributes(new { @class = "cats-date-pref-grid" });
            columns.Bound(p => p.OpeningDatePref).HeaderHtmlAttributes(new { @class = "cats-date-pref-grid" });
            columns.Bound(p => p.Status).Title("Status");
            columns.Command(p =>
                {
                    p.Custom("Edit").Click("bidEdit");
                    //p.Custom("Approve").Click("onApprove");
                    //p.Custom("Active").Click("onActive");
                });

        })
    .Pageable()
    .Sortable()
    .Filterable()
    .ClientDetailTemplateId("template")
        //.HtmlAttributes(new { style = "height:430px;" })
    .Editable(editable => editable.Mode(GridEditMode.PopUp))
    .Navigatable()
    .DataSource(dataSource => dataSource
          .Ajax()
          .PageSize(5)
            .Model(model => model.Id(p => p.BidID))
            .Read(read => read.Action("Bid_Read", "Bid"))
 
     )
     .Events(events => events.DataBound("dataBound"))
      )

<script id="template" type="text/kendo-tmpl">
    
                    @(Html.Kendo().Grid<Cats.Models.ViewModels.Bid.BidDetailViewModel>()
                        .Name("bid_#=BidID#")
                        .Columns(columns =>
                        {
                            //columns.Bound(b => b.BidDetailID).Title("ID").Width(56);
                            columns.Bound(b => b.Region).Width(120).HtmlAttributes(new { style = "background-color:lightgray" }); 
                            columns.Bound(b => b.AmountForReliefProgram).Width(80).Title("Relief");
                            columns.Bound(b => b.AmountForPSNPProgram).Width(80).Title("PSNP");
                            columns.Bound(b => b.BidDocumentPrice).Width(80);
                            columns.Bound(b => b.CPO).Width(80);

                        })
                        .ToolBar(toolBar => toolBar.Save())
                        .Editable(editable => editable.Mode(GridEditMode.InCell))
                        .Events(events => events.DataBound("onDataBound"))
                        .DataSource(dataSource => dataSource
                            .Ajax()
                            .Batch(true)
                            .ServerOperation(false)
                            .Events(events => events.Error("error_handler"))
                             .Events(events => events.Change("onGridKeydown"))
                            .PageSize(5)
                            .Model(model =>
                              {
                                  model.Id(p => p.BidDetailID);
                                  model.Field(p => p.RegionID);
                                  model.Field(p => p.BidDetailID).Editable(false);
                                  model.Field(p => p.Region).Editable(false);
                              })
                            .Read(read => read.Action("BidDetail_Read", "Bid", new { bidID = "#=BidID#" }))
                            .Update(update => update.Action("BidDetail_Update", "Bid"))

                        )
                        .Pageable()
                        .Sortable()
                        .ToClientTemplate())
                
</script>

<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }
</script>

<script>
    function bidEdit(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = "@Url.Action("EditBidStatus", "Bid")" + "/" + dataItem.BidID;
    }
</script>
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    
    function onGridKeydown(e) {
        if (e.keyCode === kendo.keys.TAB) {
            var grid = $(this).closest("[data-role=grid]").data("kendoGrid");
            var current = grid.current();
            if (!current.hasClass("editable-cell")) {
                var nextCell = current.nextAll(".editable-cell");
                if (!nextCell[0]) {
                    //search the next row
                    var nextRow = current.parent().next();
                    var nextCell = current.parent().next().children(".editable-cell:first");
                }
                grid.current(nextCell);
                grid.editCell(nextCell[0]);
            }
        }
    };

    function onDataBound(e) {

        var grid = $("#grid").data("kendoGrid");
        $(grid.tbody).on("focus", "input", function (e) {
            var input = $(this);
            setTimeout(function () { input.select(); }, 100);

        });
    }
</script>
