@using Cats.Areas.EarlyWarning.Models
@model RegionalRequestViewModel
@using Cats.Models
@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Regional Relief Requests";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}

@section Toolbar    {
     <a class="btn icon-reply" href="@Url.Action("Details", "Request", new { Area = "EarlyWarning", id = Model.RegionalRequestID })" data-buttontype="btn_back_to_list"></a>
}
<h5 class="well">Regional Request Resource Allocation</h5>
<div class="row-fluid">
    <div>
        <div class="form-horizontal well">
            <table class="table-condensed">
                <tr>
                    <td>

                        <p>
                        <b>@Html.LabelFor(model => model.ReferenceNumber) :</b>
                        @Html.DisplayFor(model => model.ReferenceNumber)


                    </td>
                    <td>
                        <p>
                        <b>@Html.DisplayNameFor(model => model.Region)
                            :</b>
                        @Html.DisplayFor(model => model.Region)

                    </td>
                    <td>
                        <p>
                            <b>@Html.DisplayNameFor(model => model.Month)
                                :</b>
                            @Cats.Helpers.RequestHelper.MonthName(Model.Month)
                            <b>Year:</b> @Model.Year
                        </p>
                    </td>


                    <td>
                        <p>
                            <b>@Html.DisplayNameFor(model => model.RequestDate)
                                :</b>
                            @Html.DisplayFor(model => model.RequestDate)
                        </p>
                    </td>
                    <td>
                        <p>
                            <b>@Html.DisplayNameFor(model => model.Program)
                                :</b>
                            @Html.DisplayFor(model => model.Program)
                        </p>
                    </td>
                    <td>
                        <p>
                            <b>Status
                                :</b>
                            @Html.DisplayFor(model => model.Status)
                        </p>
                    </td>
                </tr>
                <tr><td>
                        <p>
                            <b>@Html.DisplayNameFor(model => model.RationID)
                                :</b>
                            @Html.DisplayFor(model => model.RationID)
                        </p>
                    </td></tr>
               
            </table>

        </div>
    </div>

</div>
@section LeftBar
{
    @Html.Partial("_RegionalRequestLeftBar")

}
<h5 class="well-small">Commodities Allocation</h5>
<div style="width: 400px">
@(Html.Kendo().Grid<RequestDetailCommodityViewModel>()
      .Name("commodityGrid")
          .Columns(columns =>
          {
              columns.ForeignKey(p => p.CommodityID, (IEnumerable<Commodity>)ViewData["AvailableCommodities"], "CommodityID", "Name");
              columns.Command(command => command.Destroy()).Width(100);
          }

      )
            .ToolBar(toolbar =>
                         {
                             toolbar.Save();
                             toolbar.Create();
                         })
             .Editable(edit => edit.Mode(GridEditMode.InCell))
             .Pageable()
            .Selectable(t => t.Mode(GridSelectionMode.Single))
             .Navigatable()
              .DataSource(dataSource => dataSource
             .Ajax()
            .PageSize(5)
            
            .Model(model => model.Id(p => p.CommodityID))
            .Create(update => update.Action("Commodity_Create", "Request", new { id = ViewBag.RequestID }))
            .Read(read => read.Action("Commodity_Read", "Request", new { id = ViewBag.RequestID }))
                .Update(update => update.Action("Commodity_Update", "Request"))
            .Destroy(update => update.Action("Commodity_Destroy", "Request", new { id = ViewBag.RequestID })))
      )
</div>


<h5 class="well-small">Number of Beneficiaries</h5>

@(Html.Kendo().Grid<RegionalRequestDetailViewModel>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Template(t => { }).Title("No").ClientTemplate("#= renderNumber(data) #").Width(30);
          columns.Bound(p => p.Zone).Width(100).HtmlAttributes(new { style = "background-color:lightgray" });
          columns.Bound(p => p.Woreda).Width(100).HtmlAttributes(new { style = "background-color:lightgray" });
          columns.Bound(p => p.FDP).Width(100).HtmlAttributes(new { style = "background-color:lightgray" });
          columns.Bound(p => p.Beneficiaries).Width(60).HtmlAttributes(new {align="right"});
         

      })
      .ToolBar(toolbar => toolbar.Save())
      .Editable(editable => editable.Mode(GridEditMode.InCell))
        //.Events(events => events.DataBound("onDataBound"))
      .Pageable()
      .Sortable()
      .Scrollable()
      .Selectable(t => t.Mode(GridSelectionMode.Single))
      .Navigatable()
      .HtmlAttributes(new { style = "height:430px;" })
      .DataSource(dataSource => dataSource
                                    .Ajax()
                                    .PageSize(20)

                                    .Model(model =>
                                               {
                                                   model.Id(p => p.RegionalRequestDetailID);
                                                   model.Field(detail => detail.FDP).Editable(false);
                                                   model.Field(detail => detail.Zone).Editable(false);
                                                   model.Field(detail => detail.Woreda).Editable(false);
                                               })
                                    .Create(update => update.Action("Allocation_Create", "Request"))

                                    .Read(read => read.Action("Allocation_Read", "Request", new { id = ViewBag.RequestID }))
                                    .Update(update => update.Action("Allocation_Update", "Request"))
                                    .Destroy(update => update.Action("Allocation_Destroy", "Request"))
      ))
<script type="text/javascript">

  

</script>
