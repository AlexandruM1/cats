@using Kendo.Mvc.UI
@{
    
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}
@section LeftBar{

    @Html.Partial("_NeedAssessmentLeftBar");
}
 
<fieldset>
    <legend>
        Region:  @ViewData["RegionName"] <br/>
        Need assessment entry for: @ViewData["TypeOfNeedAssessment"]
        <br/>
    </legend>
</fieldset>

@(Html.Kendo().Grid<Cats.Models.NeedAssessmentWoredaDao>()
    .Name("grid")
    .Columns(columns =>
    {
       
        columns.Bound(o => o.WoredaName).Width("200").HtmlAttributes(new { style = "background-color:lightgray" });
        columns.Bound(p => p.ProjectedMale).Title("Projecgted Male").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Projecgted Male" });
        columns.Bound(p => p.ProjectedFemale).Title("Projected Female").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Projected Female" });
        columns.Bound(p => p.RegularPSNP).Title("Regular PSNP").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Regular PSNP" });
        columns.Bound(p => p.PSNP).Title("PSNP").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "PSNP" });
        columns.Bound(p => p.NonPSNP).Title("Non PSNP").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Non PSNP" });
        columns.Bound(p => p.Contingencybudget).Title("Contingency budget").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Contingency budget" });
        columns.Bound(p => p.TotalBeneficiaries).Title("Total Beneficiaries").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Total Beneficiaries" });
        columns.Bound(p => p.PSNPFromWoredasMale).Title("PSNP From Woredas Male").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "PSNP From Woredas Male" }).ClientFooterTemplate("Total: #=sum#").ClientGroupFooterTemplate("Total: #=sum#");
        columns.Bound(p => p.PSNPFromWoredasFemale).Title("PSNP From Woredas Female").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "PSNP From Woredas Female" }).ClientFooterTemplate("Total: #=sum#").ClientGroupFooterTemplate("Total: #=sum#"); 
        columns.Bound(p => p.PSNPFromWoredasDOA).Title("PSNP From Woredas DOA").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "PSNP From Woredas DOA" });
        columns.Bound(p => p.NonPSNPFromWoredasMale).Title("Non PSNP From Woredas Male").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Non PSNP From Woredas Male" }).ClientFooterTemplate("Total: #=sum#").ClientGroupFooterTemplate("Total: #=sum#");
        columns.Bound(p => p.NonPSNPFromWoredasFemale).Title("Non PSNP From Woredas Female").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Non PSNP From Woredas Female" }).ClientFooterTemplate("Total: #=sum#").ClientGroupFooterTemplate("Total: #=sum#"); 
        columns.Bound(p => p.NonPSNPFromWoredasDOA).Title("Non PSNP From Woredas DOA").HeaderHtmlAttributes(new { style = "overflow: visible; white-space: normal;", title = "Non PSNP From Woredas DOA" });
                                        
        
    })
    
   
    
    .ToolBar(toolbar => toolbar.Save())
    
    .HtmlAttributes(new { style = "height: 400px" })
    .Pageable()
    .Sortable()
   
   
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .DataSource(dataSource => dataSource
        .Ajax()
          
        .Aggregates(aggregates =>
        {
            aggregates.Add(p => p.PSNPFromWoredasMale).Sum();
            aggregates.Add(p => p.PSNPFromWoredasFemale).Sum();
            aggregates.Add(p => p.NonPSNPFromWoredasMale).Sum();
            aggregates.Add(p => p.NonPSNPFromWoredasFemale).Sum();
        })
        .Batch(true)
        .PageSize(20)
        .ServerOperation(false)
        .Events(events => events.Error("error_handler"))
       .Group(groups => groups.Add(p => p.ZoneName))
       .Read(read => read.Action("NeedAssessmentDetailRead", "NeedAssessment", new {region = int.Parse(ViewData["region"].ToString())}))
       .Update(update => update.Action("NeedAssessmentUpdate", "NeedAssessment"))
       //.Events(events => {
       //         //events.Error("griderrorHandler");
       //         events.RequestEnd("onRequestEnd");
       //     })
       .Model(model =>
                              {
                                  model.Id(p => p.NAId);
                                  model.Field(p => p.Woreda).Editable(false);
                                  model.Field(p => p.WoredaName).Editable(false);
                              }) 
    )
)

<script>    
 
   
    function zoneChange(value) {
       
       
           var grid = $("#grid").data("kendoGrid");

        if (value) {
           
            grid.dataSource.filter({ field: "Zone", operator: "eq", value: value });
        } else {
            grid.dataSource.filter({});
        }
    }
    
    


    $('#batchEdit').click(function () {
        if (this.checked) {
           
            $("#dropdown").style.display = 'none';
        } else {
            alert("unchecked");
        }
        
    });

</script>

<style scoped="scoped">
    #grid .k-toolbar
    {
        min-height: 27px;
        padding: 1.3em;
    }
    .category-label
    {
        vertical-align: middle;
        padding-right: .5em;
    }
    #category
    {
        vertical-align: middle;
    }
    .toolbar {
        float: right;
    }
</style>

@*.ToolBar(toolbar =>
    {
       
        toolbar.Template(@<text>
                              <div id ="dropdown" >
                                  <label class="category-label" for="category">Show woredas by Zone:</label>
                                  @(Html.Kendo().DropDownList()
                                        .Name("regions")
                                        .OptionLabel("All")
                                        .DataTextField("Name")
                                        .DataValueField("AdminUnitID")
                                        .AutoBind(false)
                                        .Events(e => e.Change("zoneChange"))
                                        .DataSource(ds => ds.Read("GetZones", "NeedAssessment", new { region = int.Parse(ViewData["region"].ToString()) }))
                                        ) 
                              </div>
                              
        </text>);
    })*@
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
    

    function onRequestEnd(e) {
        debugger;
        if (e.type == "update" && !e.response.Errors) {
            alert("Update record is successfull");
        }
        alert("type:  " + e.type);
        if (e.type == "create" && !e.response.Errors) {
            alert("Create record is successfull");
        }
    }
    
   
</script>

