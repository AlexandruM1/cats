@* @model IEnumerable<Cats.Models.Hubs.ReceiptAllocation>
           @model IEnumerable<Cats.Web.Hub.Models.ReceiptAllocationViewModelDto>*@
@using Cats.Models.Hubs
@using Cats.Models.Hubs.ViewModels
@using Cats.Web.Hub.Helpers
@using Kendo.Mvc.UI
@{
    ViewBag.Title = Html.Translate("Receipt Allocations");
}
@{
    int allocationType = ViewBag.CommoditySourceType;
    string quanityColumnHeader = "MT";
    
    if(@Html.GetCurrentUser().PreferedWeightMeasurment == "qn")
    {
        quanityColumnHeader = "Quintals";
    }
    

}
@(Html.Kendo().Grid<Cats.Models.Hubs.ReceiptAllocationViewModel>()
    .Name("ReceiveAllocationGrid" + allocationType)
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:300px;" })
    .ClientDetailTemplateId("template_receive")
    .DataSource(dataSource => dataSource
        .Ajax()
        .Model(model => model.Id(p => p.ReceiptAllocationID))
        .Read(read => read.Action("AllocationListAjax", "Receive", new { type = allocationType }))
        .Destroy(update => update.Action("DeleteAjax", "TransportBidPlan"))
    )
    .Columns(columns =>
    {
        columns.Bound(dis => dis.SINumber).Title(Html.Translate("SINumber")).Filterable(true);
        columns.Bound(dis => dis.ProjectNumber).Title(Html.Translate("Project Code")).Filterable(true);
        columns.Bound(dis => dis.QuantityInMT).Title(Html.Translate("Allocated In " + quanityColumnHeader)).Format("{0:N3}").HtmlAttributes(new { align = "right" });
        columns.Bound(dis => dis.ReceivedQuantityInMT).Title(Html.Translate("Received in " + quanityColumnHeader)).Format("{0:N3}").HtmlAttributes(new { align = "right" });
        columns.Bound(dis => dis.RemainingBalanceInMT).Title(Html.Translate("Remaining in " + quanityColumnHeader)).Format("{0:N3}").HtmlAttributes(new { align = "right" });
        columns.Bound(dis => dis.IsClosed).Hidden(true).ClientTemplate("<input type='checkbox' disabled='disabled' name='closed' <#= IsClosed?\"checked='checked'\" : \"\" #> />");

        columns.Command(command => { 
           command.Custom("Edit").Click("editRecord");
          
        });
    })
)
<script id="template_receive" type="text/kendo-tmpl">
    
                    @(Html.Kendo().Grid<ReceiveViewModelDto>()
                         .Name("Receives_#=ReceiptAllocationID#")
                        .Columns(columns =>
                        {
                            columns.Bound(d => d.ReceiptDate).Format("{0:d-MMM-yyyy}");
                            columns.Bound(d => d.GRN);
                            columns.Bound(b => b.ReceivedByStoreMan);

                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                           // .Batch(true)
                            .ServerOperation(false)
                            //.Events(events => events.Error("error_handler"))
                            // .Events(events => events.Change("onGridKeydown"))
                           /*.Model(model =>
                              {
                                  model.Id(p => p.ReceiveID);
                              })*/
                            .Read(read => read.Action("ReceiveListAjax", "Receive", new { ReceiptAllocationID = "#=ReceiptAllocationID#" }))

                        )
                         .HtmlAttributes(new { style = "max-height:250px;" })
                        .Scrollable()
                        .Sortable()
                        .ClientDetailTemplateId("template_receive_detail")
                        .ToClientTemplate())
                
</script>
<script id="template_receive_detail" type="text/kendo-tmpl">
    
                    @(Html.Kendo().Grid<ReceiveDetailViewModelDto>()
                         .Name("ReceiveDetails_#=ReceiveID#")
                        .Columns(columns =>
                        {
                            columns.Bound(com => com.CommodityName).Title(Html.Translate("Commodity"));
                            columns.Bound(com => com.UnitName).Title(Html.Translate("Unit"));
                            columns.Bound(com => com.SentQuantityInUnit).Title(Html.Translate("Sent Qty (Unit)")).HtmlAttributes(new { align = "right" }); ;
                            columns.Bound(com => com.ReceivedQuantityInUnit).Title("Received Qty (Unit)").HtmlAttributes(new { align = "right" }); ;
                            columns.Bound(com => com.SentQuantityInMT).Title(Html.Translate("Sent Qty " + quanityColumnHeader)).HtmlAttributes(new { align = "right" }); ;
                            columns.Bound(com => com.ReceivedQuantityInMT).Title(Html.Translate("Received Qty " + quanityColumnHeader)).HtmlAttributes(new { align = "right" }); ;

                        })
                        .DataSource(dataSource => dataSource
                            .Ajax()
                           // .Batch(true)
                            .ServerOperation(false)
                            //.Events(events => events.Error("error_handler"))
                            // .Events(events => events.Change("onGridKeydown"))
                           /*.Model(model =>
                              {
                                  model.Id(p => p.ReceiveID);
                              })*/
                            .Read(read => read.Action("ReceiveDetailAjax", "Receive", new { ReceiveID = "#=ReceiveID#" }))

                        )
                         .HtmlAttributes(new { style = "max-height:250px;" })
                        .Scrollable()
                        .Sortable()
                        .ToClientTemplate())
                
</script>
<script>
    function editRecord() {
    }
</script>