@using Cats.Models.Hubs
@using Cats.Models.Hubs.ViewModels
@using Cats.Web.Hub.Helpers
@using Kendo.Mvc.UI

@{

    var mesure = Html.GetCurrentUser().PreferedWeightMeasurment;


    string quanityColumnHeader = "MT";
    if (mesure.ToUpperInvariant() == "MT")
    {
        quanityColumnHeader = "MT";
    }
    else
    {
        quanityColumnHeader = "Qtl";
    }
    Layout = "~/Views/Shared/_MainLayout.cshtml";
}
@section Toolbar
{

    <a class="btn toolbar-btn" title="@Html.Translate("Recorded Dispatchs")" href="@Url.Action("Log")">@Html.Translate("Dispatch Log")</a>
    
    <!--Create New Plan-->
    <div class="btn-group">
        <button class="btn toolbar-btn" title="@Html.Translate("Create a new dispatch plan")" onclick="CreateNewPlan()">@Html.Translate("New Plan")</button>
        <button class="btn dropdown-toggle " data-toggle="dropdown">
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            <li>@Html.ActionLink(Html.Translate("Dispatch Planning"), "Index", "DispatchAllocation")</li>
            <li><a href="javascript:CreateNewLoan(2)">@Html.Translate("Loan")</a></li>
            <li><a href="javascript:CreateNewTransfer(3)">@Html.Translate("Transfer")</a></li>

        </ul>
    </div>

    <!--Create New Plan-->
    <div class="btn-group">
        <button class="btn toolbar-btn" title="@Html.Translate("Record new dispatch")">@Html.Translate("New Dispatch")</button>
        <button class="btn dropdown-toggle " data-toggle="dropdown">
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            <li>@Html.ActionLink(Html.Translate("To FDP"), "Create", "Dispatch", new { type = 1 }, null)</li>
            <li>@Html.ActionLink(Html.Translate("Loan"), "Create", "Dispatch", new { type = 2 }, null)</li>
            <li>@Html.ActionLink(Html.Translate("Transfer"), "Create", "Dispatch", new { type = 3 }, null)</li>
        </ul>
    </div>
}
<div>
    <h3 id="header_title">@Html.Translate("Dispatch")</h3>

    <!--filter criteria-->
    <div class="filter">
        <div class="form-inline" style="margin: 0; padding: 0;">
            <i class="icon-filter" style="margin-left: 10px;"></i>

            <div class="input-prepend" style="margin-left: 20px;">
                <label for="HubsID" class="add-on">Hub</label>
                @Html.DropDownList("HubsID", null, new { @class = "inputs-large" })
            </div>
            <div class="input-prepend" style="margin-left: 50px;">
                <label for="FilterCommodityTypeID" class="add-on">Commodity</label>
                @Html.DropDownList("FilterCommodityTypeID", null, new { @class = "inputs-large" })
            </div>

            <label class="checkbox" style="margin-left: 50px;">
                <input onchange="dataRefresh();" type="checkbox" id="chk_closed">
                Show closed Plans
            </label>

            <label class="checkbox" style="margin-left: 20px;">
            </label>
            <button onclick="onToggleFilterAdmin('btn_filter_fdp')" id="btn_filter_fdp">Admin</button>


            <button onclick="dataRefresh()">Refresh</button>
        </div>

    </div>

    <!--Modal Editor-->
    <div id="modal_edit_window" class="modal hide fade" style="width: 900px;" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">

        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="modal_label">Create Plan</h3>
        </div>

        <div class="modal-body" id="modal_body">
        </div>

        <div class="modal-footer">
            <button class="btn btn-danger" data-dismiss="modal" aria-hidden="true"><i class="icon-white icon-remove"></i> @Html.Translate("Cancel")</button>
            <!--<button class="btn btn-primary" onclick="initValidation('frm_edit_inline')">Validate</button>-->
            <button class="btn btn-primary" onclick="submitInlineForm('frm_edit_inline')"><i class="icon-white icon-ok"></i> @Html.Translate("Ok")</button>

        </div>

    </div>
    <br />
    
    <!--Tab content-->
    <div>
    <ul id="myTab" class="nav nav-tabs">
        <li class="active"><a href="#to_fdp" data-toggle="tab" onclick="onSourceTypeChange(@Cats.Models.Hubs.CommoditySource.Constants.DONATION)">@Html.Translate("Dispatch To FDPs")</a></li>
        <li><a href="#to_loan" data-toggle="tab" onclick="onSourceTypeChange(@Cats.Models.Hubs.CommoditySource.Constants.LOAN)">@Html.Translate("Dispatch to Loans")</a></li>
        <li><a href="#to_transfer" data-toggle="tab" onclick="onSourceTypeChange(@Cats.Models.Hubs.CommoditySource.Constants.LOCALPURCHASE)">@Html.Translate("Disaptch to Transfers")</a></li>
    </ul>

    <div id="myTabContent" class="tab-content">
        <div class="tab-pane fade active in" id="to_fdp">
            <div class="field-set">
                @Html.Action("DispatchedToFDPList", "Dispatch", new { closed = false })
            </div>
        </div>

        <div class="tab-pane fade" id="to_loan">
            <div class="field-set" style="vertical-align: top">
                @Html.Action("OtherDispatchAllocationsList", "Dispatch", new { allocationType = "Loan" })
            </div>
        </div>

        <div class="tab-pane fade" id="to_transfer">
            <div class="field-set">
                @Html.Action("OtherDispatchAllocationsList", "Dispatch", new { allocationType = "Transfer" })
            </div>
        </div>
    </div>
    </div>

    <!--Admin Region Selector-->

    <div id="div_form_template" style="display: none;">
        <button type="button" class="close" data-dismiss="popover" style="margin-top: -40px;" onclick="hidePopover()">×</button>
        <div style="width: 276px; min-height: 100px; overflow: hidden;">
            @Html.Partial("~/Views/Shared/_AdminUnitTree.cshtml")
        </div>
    </div>


    <style>
        .progress
        {
            margin:0;
            height:16px;
        }
        .progress .bar
        {

            overflow:visible;
         }
        .progress .bar-label
        {
            font-size:11px;
           /* color:rgb(3,55,95);*/
           color:#00F;
            line-height:16px;
            overflow:visible;
            text-shadow:1px 1px 1px #FFF;
           
            width:250px;
            
        }
        .filter
        {
            background: #FFF;
            border-radius: 4px;
            border: solid 4px #FFF;
            box-shadow: rgba(0,0,0,0.3) 0px 0px 2px;
        }

        .close_false
        {
        }

        .close_true
        {
            display: none;
        }

        .two-col-form .control-group
        {
            float: left;
            width: 49%;
            /* background:#EEE;
        border:solid 1px #ff6a00;
    */
        }

        .required
        {
            color: #3d0101;
        }
    </style>

    <script>
        var filterAdmin = { RegionID: "", ZoneID: "", WoredaID: "", FDPID: "" };
        var filterAdminUnitID = "";
        function onToggleFilterAdmin() {
            $("#btn_filter_fdp").popover('toggle');
        }
        function initFDPSelector() {
            var htmlRenderer = function (htm) { return "<input  type='checkbox' onchange='onChk_showAllAdminChange()' id='chk_showAllAdmin' checked='checked'> Show For All" + htm };
            showFDPSelector({ target: 'btn_filter_fdp', callback: "onfilterAdminChange", adminUnit: filterAdmin, htmlRenderer: htmlRenderer, noshow: 1 })

        }
        var onfilterAdminChange = function (type, selection, id) {
            console.log("onfilterAdminChange", selection);

            if (selection) {

                filterAdmin = selection;
            }
            filterAdminUnitID = id;
            if (!document.getElementById("chk_showAllAdmin").checked) {
                dataRefresh({ DispatchToFDPGrid: "" });
            }
        }
        function submitInlineForm(frmId) {

            var $frm = $("#" + frmId);
            //alert($frm.valid());
            try{
                if (!$frm.valid()) {
                    // alert("Error");
                    return;
                }
            }
            catch (e) { }
           // alert("valid");
            //return;
            // return;
            var url = $frm.attr("action");
            var attribs = {};
            console.log("submitForm ", url);
            $frm.hide();
            /*
            var $inputs = $("#" + frmId + " input");
            $inputs.each(function (index, element) {
                //console.log("   submitForm ", element);
                if (element.name) {
                    attribs[element.name] = element.value;
                }
            });
            */
            attribs = $frm.serialize();
            //console.log(attribs);
            $.post(url, attribs, function (data) {
                $frm.show();
                console.log("Submit Result", data);
                var submitResult = data;
                if (typeof (data) == "string") {
                    eval("submitResult = " + data);
                }
                if (submitResult.status) {
                    $('#modal_edit_window').modal(('hide'));
                    dataRefresh();
                }
                //$("#modal_body").html(data);

                //alert(data);
            });
        }
        function onChk_showAllAdminChange() {
            dataRefresh({ DispatchToFDPGrid: "" });
        }
        $(function () {
            var onFilterChange = function () { dataRefresh() };

            $("#FilterCommodityTypeID").change(onFilterChange);
            $("#HubsID").change(onFilterChange);
            initFDPSelector();
            //$("#chk_showAllAdmin").click(function () { dataRefresh({ DispatchToFDPGrid: "" }) });
        });
        function showModalEditor(url, attribs, title) {
            $("#modal_label").html(title);
            $("#modal_body").html("...Loading");
            $('#modal_edit_window').modal();

            /*
            $.post(url, attribs, function (data) {
                $("#modal_body").html(data);
            });
            */
            $.get(url, attribs, function (data) {
                $("#modal_body").html(data);
                setTimeout(function () {
                    initValidation()
                }, 1000);

            });
        }
        function initValidation() {
            $.validator.unobtrusive.parse(document);
            console.log("validating");
        }
        function getFilterAttributes() {
            var closed = "false";
            if (document.getElementById("chk_closed").checked) {
                closed = "true";
            }
            var commodityType = $("#FilterCommodityTypeID").val();
            var HubID = $("#HubsID").val();

            var AdminUnitID = filterAdminUnitID;
            if (document.getElementById("chk_showAllAdmin") && document.getElementById("chk_showAllAdmin").checked) {
                AdminUnitID = "";
            }
            return { closed: closed, commodityType: commodityType, HubID: HubID, AdminUnitID: AdminUnitID };
        }



        function onSourceTypeChange() {
        }
        function dataRefresh(refreshGrids) {
            //alert();
            //return;

            var gridUrls = {
                DispatchToFDPGrid: '@Url.Action("DispatchedToFDPListAjax", "Dispatch")'
            , DispatchAllocationGrid_Loan: '@Url.Action("DispatchedToLoanListAjax", "Dispatch")'
            , DispatchAllocationGrid_Transfer: '@Url.Action("DispatchedToTransferListAjax", "Dispatch")'
            };
        refreshGrids = refreshGrids ? refreshGrids : gridUrls;
        var attribs = getFilterAttributes();
        console.log("  attribs", attribs);
        var urlParams = "";
        var sep = "?";
        for (var i in attribs) {
            if (attribs[i] != "") {
                urlParams += sep + i + "=" + attribs[i];
                sep = "&";
            }
        }
        for (var i in refreshGrids) {
            var loadUrl = gridUrls[i] + urlParams;
            console.log("   " + i, loadUrl);
            var gr = $("#" + i).data("kendoGrid");
            if (gr != null) {
                gr.dataSource.transport.options.read.url = loadUrl;
                gr.dataSource.filter({});
            }
        }

    }
    function EditOtherAllocation(id, type, title) {
        console.log("EditOtherAllocation", id, type);
        var url = '@Url.Action("Edit", "DispatchAllocation")';
        url = url + type + '2';
        if (id) {
            url = url + '?id=' + id;
        }
        title = title ? title : "Edit " + type;
        showModalEditor(url, {}, title);
    }
    function CreateNewLoan(type) {
        EditOtherAllocation("", "Loan", "Create new Loan");
    }
    function CreateNewTransfer(type) {
        EditOtherAllocation("", "Transfer", "Create new Transfer");
    }
    </script>
</div>
