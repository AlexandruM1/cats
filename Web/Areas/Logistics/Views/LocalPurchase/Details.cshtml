@using Cats.Areas.Logistics.Models
@using Kendo.Mvc.UI
@using LanguageHelpers.Localization
@model Cats.Areas.Logistics.Models.LocalPurchaseWithDetailViewModel
@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_MainLayout.cshtml";  
}

@section Toolbar
{
   
   
    <div class="btn-group" style="margin-right: 8px;">
    <button class="btn dropdown-toggle " data-toggle="dropdown"> @Translator.Translate("Actions") 
        <span class="caret"></span>
    </button>
         @if(Model.StatusID==1)
         {
             <ul class="dropdown-menu">
           
                 <li><a  href="@Url.Action("Approve", "LocalPurchase", new {id = Model.LocalPurchaseID})" >@Translator.Translate("Approve(Send to Hub)")</a></li>
             </ul>
              <a class="btn toolbar-btn " data-buttontype="btn_save" data-submittedform="frm_create_localPurchase" title="Save"></a>
         }
          <a class="btn toolbar-btn " data-buttontype="btn_cancel" href="@Url.Action("Index", "LocalPurchase")" title="Cancel"></a>
        
    </div>
}
<h4>Recipt Plan From Local Purchase Detail </h4>

@using (Html.BeginForm("UpdateLocalPurchase", "LocalPurchase", FormMethod.Post, new { id = "frm_create_localPurchase" }))
{
    @Html.HiddenFor(m => m.LocalPurchaseID)
    <div class="form-horizontal well">
        <table border="0">
            <tr>
                <td>
               
                    <div class="control-label">
                        @Html.Label(Translator.Translate("SI Number"))
                    </div>
                    <div class="controls">
                        @(Html.Kendo().AutoComplete()
                              .Name("SINumber")
                              .HtmlAttributes(new { style = "width:215px;" })
                              .Filter("startswith")
                              .Placeholder("Enter or Select SINumber...")
                              .DataSource(source => source.Read(read => read.Action("AutoCompleteSiNumber", "LocalPurchase").Data("onAdditionalData")).ServerFiltering(true))

                              )
                    </div>
                
                </td>
                <td>
                
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Commodity Type"))
                    </div>
                    <div class="controls">
                        @Html.DropDownList("CommodityTypeID")
                    </div>
                
                </td>
            </tr>
            <tr>
                <td>
                
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Commodity Source"))
                    </div>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.CommoditySource, new { Disabled = true })
                    </div>
                
                </td>
                <td>
               
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Commodity"))
                    </div>
                    <div class="controls">
                        @Html.DropDownList("CommodityID")
                    </div>
                </td>

            </tr>
            <tr>
                <td>
                
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Project Code"))
                    </div>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.ProjectCode)
                    </div>
                
                </td>
                <td>
                
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Program"))
                    </div>
                    <div class="controls">
                        @Html.DropDownList("ProgramID")
                    </div>
                
                </td>
            </tr>
            <tr>
                <td>
               
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Supplier Name"))
                    </div>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.SupplierName)
                    </div>
               
                </td>
                <td>
              
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Donor"))
                    </div>
                    <div class="controls">
                        @Html.DropDownList("DonorID")
                    </div>
               
                </td>
            </tr>
            <tr>
                <td>
                
                    <div class="control-label">
                        @Html.Label(Translator.Translate("PurchaseOrder"))
                    </div>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.PurchaseOrder)
                    </div>
                
                </td>
                <td>
                
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Quantity in MT"))
                    </div>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.Quantity)
                    </div>
               
                </td>
            </tr>
            <tr>
                <td colspan="2">
               
                    <div class="control-label">
                        @Html.Label(Translator.Translate("Reference Number"))
                    </div>
                    <div class="controls" style="height: 10px">
                        @Html.TextBoxFor(m => m.ReferenceNumber)
                    </div>
                
                </td>
            </tr>
        </table>
    </div>
    <div>
        @(Html.Kendo().Grid(Model.LocalPurchaseDetailViewModels)
              .Name("LocalPurchaseDetail")
              .Columns(columns =>
              {
                  columns.Bound(m => m.HubID).Hidden(true).ClientTemplate("#= HubID #" +
                "<input type='hidden' name='LocalPurchaseDetailViewModels[#= index(data)#].HubID' value='#= HubID #' />");
                  columns.Bound(m => m.HubName).Title(Translator.Translate("Hub")).ClientTemplate("#= HubName #" +
               "<input type='hidden' name='LocalPurchaseDetailViewModels[#= index(data)#].HubName' value='#= HubName #' />");
                  columns.Bound(m => m.AllocatedAmonut).Width(200).Title(Translator.Translate("Allocated Amonut in MT")).HtmlAttributes(new { align = "right" })
                  .ClientTemplate("#= AllocatedAmonut #" +
                "<input type='hidden' name='LocalPurchaseDetailViewModels[#= index(data)#].AllocatedAmonut' value='#= AllocatedAmonut #' />");
                  columns.Bound(m => m.RecievedAmonut).Width(200).Title(Translator.Translate("Recieved Amount in MT")).HtmlAttributes(new { align = "right" })
                  .ClientTemplate("#= RecievedAmonut #" +
                "<input type='hidden' name='LocalPurchaseDetailViewModels[#= index(data)#].RecievedAmonut' value='#= RecievedAmonut #' />");
                  columns.Bound(m => m.RemainingAmonut).Width(200).Title(Translator.Translate("Remaining Amonut in MT")).HtmlAttributes(new { align = "right" });

                  columns.Bound(m => m.LocalPurchaseID).Hidden(true).ClientTemplate("#= LocalPurchaseID #" +
                "<input type='hidden' name='LocalPurchaseDetailViewModels[#= index(data)#].LocalPurchaseID' value='#= LocalPurchaseID #' />");
                  columns.Bound(m => m.LocalPurchaseDetailID).Hidden(true).ClientTemplate("#= LocalPurchaseDetailID #" +
                "<input type='hidden' name='LocalPurchaseDetailViewModels[#= index(data)#].LocalPurchaseDetailID' value='#= LocalPurchaseDetailID #' />");

              }

              )

              .Editable(edit => edit.Mode(GridEditMode.InCell))
              .Navigatable()
              .DataSource(dataSource => dataSource
                                            .Ajax()
                                            .Model(model =>
                                            {
                                                model.Id(p => p.LocalPurchaseDetailID);
                                                model.Field(p => p.HubName).Editable(false);
                                                model.Field(p => p.RecievedAmonut).Editable(false);
                                                model.Field(p => p.RemainingAmonut).Editable(false);
                                            })

                                            .Read(read => read.Action("HubsLocalPurchaseDetail_Read", "LocalPurchase", new { localPurchaseID = Model.LocalPurchaseID }))
        //.Update(update => update.Action("Commodity_Update", "Request"))
              )
              )
    </div>
}
<script type="text/javascript">
    function onAdditionalData(e) {
      
        return {
            term: $("#SINumber").val()
           
        };
    }
    function index(dataItem) {
        var data = $("#LocalPurchaseDetail").data("kendoGrid").dataSource.data();

        return data.indexOf(dataItem);
    }
    </script>
