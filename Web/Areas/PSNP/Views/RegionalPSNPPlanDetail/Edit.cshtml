@using System.Collections
@using Kendo.Mvc.UI;
@using Cats.Models;
@using Cats.Models.PSNP;
@using LanguageHelpers.Localization
@model IEnumerable<Cats.Models.PSNP.PSNPPlanDetailView>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_MainLayout.cshtml";
    var duration = 0;
    var RegionalPSNPPlanID = 0;
}
@section LeftBar
{
    @Html.Partial("_PSNPDetailLeftBar")
       
}
 @section Toolbar
 {
     @if(ViewBag.plan_user == ViewBag.current_user )
     {
         <a class="btn toolbar-btn " data-buttontype="btn_save" href="javascript:saverecords()"></a>
         <a class="btn toolbar-btn " data-buttontype="btn_cancel" href="javascript:cancelChanges()"></a>
         <a class="btn toolbar-btn " data-buttontype="btn_reload" href="javascript:reloadrecords()"></a>
     }
     <a class="btn toolbar-btn " data-buttontype="btn_back_to_list" href="@Url.Action("Index", "RegionalPSNPPlanDetail",new {id=ViewBag.PsnpPlan.RegionalPSNPPlanID})"></a>
    
}
   

@if (ViewBag.psnpPlan != null)
{
    duration = ViewBag.PsnpPlan.Duration;
    RegionalPSNPPlanID = ViewBag.PsnpPlan.RegionalPSNPPlanID;
    <div>
    <h4>
        <b>Edit PSNP Plan</b>:   
        <span>@ViewBag.PsnpPlan.Year</span> 
        <span style="font-size:0.7em"> : Duration of Assistance [@ViewBag.PsnpPlan.Duration month]</span>

    </h4>
   
    </div>
}
<style>
    .error
    {
        color:#F00;
    }
    .success
    {
        color:#00F;
    }

</style>
@(Html.Kendo().Grid<Cats.Models.PSNP.PSNPPlanDetailView>()
    .Name("grid")
    .Columns(columns =>
    {
        
        columns.Bound(p => p.RegionName);
        columns.Bound(p => p.ZoneName);
        columns.Bound(p => p.WoredaName);
        //columns.Bound(p => p.FDPName);
        columns.Bound(p => p.BeneficiaryCount).HtmlAttributes(new { align = "Right" });
        columns.ForeignKey(p => p.SartingMonth, (IEnumerable)ViewData["Month"], "Id", "Name");
        columns.Bound(p => p.FoodRatio).HtmlAttributes(new { align = "Right",@class="FoodRatio" });
        columns.Template(c => { }).Title("Cash Ratio").ClientTemplate("<span class='rowCount' rowCount='#=rowCount#' nextRow='#=getRowNo(data)#'>#=calculateCashRatio(data)# </span>").HtmlAttributes(new { align = "Right", @class = "CashRatio #=getRowStyle(data)#" });     
      //  columns.Bound(p => p.CashRatio).HtmlAttributes(new { align = "Right", @class = "CashRatio #=getRowStyle(data)#" });
       // columns.Template(c => { }).Title("").ClientTemplate("<span class='rowCount' rowCount='#=rowCount#'>#=getRowNo(data)#");

        
    })
    .DataSource(dataSource => dataSource

        .Ajax()
        .Batch(true)
        .Model(model => model.Id(p => p.RegionalPSNPPlanDetailID))
        .Read(read => read.Action("GetListAjax", "RegionalPSNPPlanDetail").Data("filterInfo"))
        .Create(update => update.Action("EditAjax", "RegionalPSNPPlanDetail"))
        .Update(update => update.Action("EditAjax", "RegionalPSNPPlanDetail"))
        .Destroy(update => update.Action("DeleteAjax", "RegionalPSNPPlanDetail"))
        .Model(model =>
        {
            model.Field(p => p.ZoneName).Editable(false);
            model.Field(p => p.WoredaName).Editable(false);
            model.Field(p => p.CashRatio).Editable(false);
            //model.Field(p => p.FDPName).Editable(false);
            if(ViewBag.plan_user != ViewBag.current_user )
            {
                model.Field(p => p.BeneficiaryCount).Editable(false);
                model.Field(p => p.StartingMonthName).Editable(false);
                model.Field(p => p.FoodRatio).Editable(false);
            }
        })
         .Group(group =>
           {
               group.Add(m => m.RegionName);
               group.Add(m => m.ZoneName);
           })
        )
    
    .HtmlAttributes(new { style = "width:100%; height:450px;" })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
        .Selectable(selectable => selectable
            //.Mode(GridSelectionMode.Single)
                .Type(GridSelectionType.Cell)
                )
   .Events(events => events.DataBound("onDataBound"))
    .Sortable()
    .Scrollable()
    .Filterable()
   .Groupable()
   .Navigatable()
   

)
<script type="text/javascript">
    var duration="@duration";   
    var rowCount=0;
    var gridData=[];
    function calculateCashRatio(data) {
        return duration-data.FoodRatio;
    } 
    function getRowStyle(data)
    {
        if(data.FoodRatio+data.CashRatio!=duration)
        {
            return "error";
        }
    }
    function getRowNo(data)
    {
        gridData[rowCount]=data;
        return 1+rowCount++;
    }
    $(function()
    {
        var printurl= "@Url.Action("print", "RegionalPSNPPlan", new { Area = "PSNP", id = RegionalPSNPPlanID })";
        $("#toolbar_button_print").attr("href",printurl);
        
    });
    
    function onDataBound(e) 
    {
        rowCount=0;
       // gridData=[];
        console.log("onDataBound");
        var grid = $("#grid").data("kendoGrid");
        // $("[role='row']").css("color","#F00");

        $(grid.tbody).on("focus", "input", function (e) {
            console.log("onDataBound","focus",$(this).attr("id"));
            var input = $(this);
            setTimeout(function () { input.select(); },50);
            
            if($(this).attr("id")=="FoodRatio")
            {
                $(this).change(function(){
                    var CashRatio=duration -$(this).val();
                    var $CashRatio=$(this).closest("tr").find(".CashRatio");
                    var $rowCount=$(this).closest("tr").find(".rowCount");
                    var rowCount=$rowCount.attr("rowCount");
                    $CashRatio.removeClass("error").html("<span>" +CashRatio + "</span>" );
                    gridData[rowCount].CashRatio=CashRatio;

                    console.log("change",{rowCount:rowCount,CashRatio:CashRatio,data: gridData[rowCount]});
                   // console.log("onDataBound",{data:$('#grid').data().kendoGrid.dataSource.data()})
                });
            }
        });
        return;
        $(grid.tbody).on("change", ".FoodRatio>input", function (e) {
            $(this).css("color","#F00");
            var FoodRatio_div=this;
            var $CashRatio = $(this).parent().find(".CashRatio");
            $(this).parent().css("color","#00F");
            $CashRatio.css("color","#F0F");

            var FoodRatio = FoodRatio_div.innerText;
            var innerHtml=FoodRatio_div.innerHTML;
                
            var CashRatio=duration -FoodRatio;
            console.log("changed",{FoodRatio:FoodRatio,duration:duration,CashRatio:CashRatio,innerHtml:innerHtml,FoodRatio_div:FoodRatio_div});
            $CashRatio.html(CashRatio);
            return;

            setTimeout(function () { 
                var FoodRatio = FoodRatio_div.innerText;
                var innerHtml=FoodRatio_div.innerHTML;
                
                var CashRatio=duration -FoodRatio;
                console.log("changed",{FoodRatio:FoodRatio,duration:duration,CashRatio:CashRatio,innerHtml:innerHtml,FoodRatio_div:FoodRatio_div});
                $CashRatio.html(CashRatio);
            
            
            },100);
            return;
            
            var rowIdx = $("tr", grid.tbody).index(row);
            var firstItem = $('#grid').data().kendoGrid.dataSource.data()[rowIdx];
            var FoodRatio = firstItem.get('FoodRatio');
            
            if(FoodRatio>0)
            {
                firstItem.set('CashRatio',duration -FoodRatio);
            }
        });
        /*
        $(grid.tbody).on("change", ".FoodRatio", function (e) {
            
            var row = $(this).closest("[role='row']");
            row.css("color","#F00");
            var rowIdx = $("tr", grid.tbody).index(row);
            var firstItem = $('#grid').data().kendoGrid.dataSource.data()[rowIdx];
            var FoodRatio = firstItem.get('FoodRatio');
            console.log("changed",{FoodRatio:FoodRatio,duration:duration,firstItem:firstItem});
            if(FoodRatio>0)
            {
                firstItem.set('CashRatio',duration -FoodRatio);
            }
        });*/
     }
    var deleteURL="@Url.Action("DeleteAjax", "RegionalPSNPPlanDetail", new { Area = "PSNP" })"
    function deleteRecord(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var id=dataItem.RegionalPSNPPlanDetailID;
        if(confirm("Are you sure you want to delete this record? " + id)==true)
        {
            var post_values={id:id};
            
            $.post(
                    deleteURL
                    ,post_values
                    ,function (data)
                    {
                        $("#grid").data("kendoGrid").dataSource.read();
                    }
                 );

        }
    }
    function filterInfo() {
        return {id:@RegionalPSNPPlanID};
    }
    function saverecords()
    {
        var timer;
        $("#grid").data("kendoGrid").saveChanges();
        var msg = '<div class="cats_success">Success: PSNP Plan was updated successfully.</div>';
        $(".message-window").html(msg).delay(800).hide().fadeIn();
        clearTimeout(timer);
        timer = setTimeout(function () {
            $(".message-window").fadeOut("normal", function () { $(this).html(''); });
        }, 5000);
    }
    function reloadrecords()
    {
        $("#grid").data("kendoGrid").dataSource.read();
    }
    function cancelChanges()
    {
        $("#grid").data("kendoGrid").dataSource.cancelChanges();
    }
    
    //function makeBlank(arg) {
    //    // alert("Hey");
    //    alert($(arg).text() + "VALUE");
    //}
    
    //function onChange(arg) {
    //    var selected = $.map(this.select(), function(item) {
    //        return $(item).text();
    //    });
        
    //    var grid = $("#grid").data("kendoGrid");
    //    $(grid.tbody).on("change", "td", function(e) {
    //            //alert(selected.toString());
    //            var row = $(this).closest("tr");
    //            var rowIdx = $("tr", grid.tbody).index(row);
    //            var firstItem = $('#grid').data().kendoGrid.dataSource.data()[rowIdx];
    //           // firstItem.set('BeneficiaryCount', "12");
    //    });
        
    //    if (selected == "0" || selected == "0.00") {
    //        return $(item).text("2");
    //    }
    //    alert(selected);
    //}    
    
    //function onFocus() {
        //alert("I");
        //$.map(this.focus(function() {
        //    var input = $(this);
        //    alert("IN");
        //    setTimeout(function() {
        //        input.select();
        //    });

        //}));
        //var input =
       
    //    $.map(this).focus(function (e) {
    //        var input = $(this);
    //        //console.log('focus');
    //          alert("PLease");  
    //        setTimeout(function() {
    //            input.select(); 
                
    //        });
    //    });
    //    input.focus();
    //}     
    

    
        //function selecT(e) {
        //    var input = e.container.find("input");
            
        //    input.focus(function (e) {
        //        var input = $(this);
                
        //        //console.log('focus');
                
        //        setTimeout(function() {
        //            input.select();
        //        });
        //    });
        //    input.focus();
        //}
        
        //function selectText(e) {

        //    //alert("here");    
        //    var activeInput = $("#grid_active_cell >input");
        //    if(activeInput) {
        //        alert(activeInput.val());
                
        //    }

        //    $("#grid_active_cell").on('focus', function () {
        //        var input = $(this);
        //        setTimeout(function () { input.select(); });
        //    });
        //}
    
    
</script>
